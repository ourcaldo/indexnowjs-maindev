Hi Replit, so as you see I have webapp which is IndexNow a 3rd party to request to GSC API to index a link. This webapp is same and inspirated by Instant Indexing wordpress plugin by RankMath.

So, as this webapp is on development stage and for personal use only. I need you to focus to enhance and fix some problem in dashboard and panel.

Before you do make the changes, I need you to do a deep dive into the codebase, so you do have better understanding about this webapp, the current stage and feature and the obstacles.

Before we more in-deepth about this project. Please take time to read all information in replit.md because there's a lot important things that you should know.

Before, we already made plan in plan.md and I ask you about P1.4 with this conversation history:

'''Thanks, now on P1.4, what your plan and recommendation? No need code changes yet, I need to know few things first'''

Then, you answer:

'''
Looking at the current state and the P1.4 priority, let me analyze what should be addressed next. First, let me check the plan file to understand the current priorities:


Opened plan.md
Based on the plan file and the current state, here's my analysis for P1.4: Insufficient Error Handling:

P1.4 Analysis: Insufficient Error Handling
Current Issues Identified:

Generic error messages that hide security issues and make debugging difficult
Inconsistent error handling patterns across the codebase
Missing structured logging for security and operational events
Potential information leakage through error responses
My Plan & Recommendations for P1.4:
Phase 1: Error Handling Audit
Analyze all API routes for current error handling patterns
Identify places where sensitive information might leak through errors
Map out inconsistent error response formats
Phase 2: Structured Error System
Create a centralized error handling system with:
Security-conscious error messages (don't expose internal details)
Consistent error response format across all APIs
Proper HTTP status codes for different error types
Error correlation IDs for debugging without exposing sensitive data
Phase 3: Security-First Logging
Replace console.log statements with structured logging
Implement different log levels (ERROR, WARN, INFO, DEBUG)
Add security event logging for:
Authentication failures
Authorization violations
Input validation errors
Rate limiting triggers
Phase 4: Error Boundaries & UX
Add React error boundaries for better frontend error handling
Create user-friendly error pages
Implement proper loading states and error recovery
Questions Before Implementation:
Logging Preference: Do you want to use a specific logging library (like Winston, Pino) or keep it simple with structured console logging?

Error Detail Level: How detailed should error responses be for:

End users (minimal for security)
Developers/debugging (detailed but secure)
System monitoring (comprehensive)
Priority Focus: Should I focus on:

API security errors first (authentication, authorization)
Database/external service errors
Frontend user experience errors
Or all simultaneously?
Monitoring Integration: Do you plan to integrate with any external monitoring service (like Sentry, LogRocket) or keep everything internal?

The browser console shows some Supabase GoTrueClient warnings which suggests there might be multiple authentication instances - this could be part of the error handling improvements too.

What's your preference on these aspects before I start the implementation?
'''

I want you to proced it with this details:
Good. Please procced it, but make sure to:

1. Error message in the frontend must be not show internal error, I mean just simple error message like "Can't add service account" or "Failed to load Indexing jobs", while in the backend show detailed log error
2. Logging Preference: I didn't quite sure about Winston or Pino, choose it for me based on your own research.
3. Error Detail Level: Like the one that I said, for the end user as much as minimal that can be, for developer and system make it comprehensive
4. Lastly, please save the records of the error handling, which I didnt have the tables and column yet, so please make it by giving me the SQL queries for me to run in SQL Editor Supabase. Make sure you read replit.md to understand how to naming a tables with prefix and collections.