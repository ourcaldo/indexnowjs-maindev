create table public.indb_auth_user_profiles (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid not null,
  full_name text null,
  role text null default 'user'::text,
  email_notifications boolean null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  phone_number text null,
  package_id uuid null,
  subscribed_at timestamp with time zone null,
  expires_at timestamp with time zone null,
  daily_quota_used integer null default 0,
  daily_quota_reset_date date null default CURRENT_DATE,
  email text null,
  country text null,
  trial_started_at timestamp with time zone null,
  trial_status character varying(20) null default 'none'::character varying,
  auto_billing_enabled boolean null default false,
  has_used_trial boolean null default false,
  trial_used_at timestamp with time zone null,
  constraint indb_auth_user_profiles_pkey primary key (id),
  constraint indb_auth_user_profiles_user_id_key unique (user_id),
  constraint indb_auth_user_profiles_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE,
  constraint indb_auth_user_profiles_package_id_fkey foreign KEY (package_id) references indb_payment_packages (id),
  constraint indb_auth_user_profiles_role_check check (
    (
      role = any (
        array['user'::text, 'admin'::text, 'super_admin'::text]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_user_profiles_package_id on public.indb_auth_user_profiles using btree (package_id) TABLESPACE pg_default;

create index IF not exists idx_user_profiles_quota_reset on public.indb_auth_user_profiles using btree (daily_quota_reset_date) TABLESPACE pg_default;

create index IF not exists idx_user_profiles_expires_at on public.indb_auth_user_profiles using btree (expires_at) TABLESPACE pg_default;

create index IF not exists idx_user_quota_summary_user_id on public.indb_auth_user_profiles using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_user_profiles_trial_usage on public.indb_auth_user_profiles using btree (has_used_trial, trial_used_at) TABLESPACE pg_default;

create index IF not exists idx_user_profiles_user_id on public.indb_auth_user_profiles using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_indb_auth_user_profiles_user_id on public.indb_auth_user_profiles using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_indb_auth_user_profiles_role on public.indb_auth_user_profiles using btree (role) TABLESPACE pg_default;

create index IF not exists idx_indb_auth_user_profiles_package_id on public.indb_auth_user_profiles using btree (package_id) TABLESPACE pg_default;

create index IF not exists idx_indb_auth_user_profiles_email on public.indb_auth_user_profiles using btree (email) TABLESPACE pg_default;

create trigger assign_default_package_trigger BEFORE INSERT on indb_auth_user_profiles for EACH row when (new.package_id is null)
execute FUNCTION assign_default_package ();

create trigger sync_user_email_on_insert BEFORE INSERT on indb_auth_user_profiles for EACH row
execute FUNCTION sync_user_email ();

create trigger sync_user_email_on_update BEFORE
update on indb_auth_user_profiles for EACH row when (old.user_id is distinct from new.user_id)
execute FUNCTION sync_user_email ();