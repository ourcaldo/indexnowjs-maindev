🔍 Current Input Validation State Analysis
✅ Strengths (Already Implemented)
Zod Schema Validation: Extensive use in shared/schema.ts for auth flows
Frontend Form Validation: React Hook Form with Zod integration
Basic File Upload Checks: File type and size validation (5MB limit)
Validation Patterns: Regex patterns in lib/core/constants/ValidationRules.ts
CMS Content Validation: Post and page form validation
❌ Critical Gaps Identified
📋 Comprehensive Enhancement Mapping
1. API Endpoint Input Validation (HIGH PRIORITY)
Vulnerable Areas Found:

🚨 Missing Query Parameter Validation:
- app/api/v1/admin/orders/route.ts (page, limit, status, dates, amounts)
- app/api/v1/rank-tracking/keywords/route.ts (domain_id, device_type, filters)
- app/api/revalidate/route.ts (path parameter)
- app/api/v1/admin/cms/pages/route.ts (page parameter)
🚨 Missing Request Body Validation:
- app/api/v1/admin/users/[id]/change-package/route.ts (packageId)
- app/api/v1/admin/users/[id]/extend-subscription/route.ts (days)
- app/api/v1/admin/orders/[id]/status/route.ts (status, notes)
- app/api/midtrans/webhook/route.ts (payment notification data)
🚨 Missing URL Parameter Validation:
- All [id] routes lack UUID format validation
- Slug validation missing in dynamic routes
2. File Upload Security (HIGH PRIORITY)
Current Issues:

🚨 app/api/v1/admin/cms/upload/route.ts:
- Basic MIME type checking only
- Missing file content validation
- No virus scanning
- No metadata stripping
- No file signature verification
🚨 Payment Proof Uploads:
- Frontend validation only (client-side bypassable)
- No server-side content verification
- Missing malicious file detection
3. Input Sanitization & XSS Prevention (CRITICAL)
Vulnerable Areas:

🚨 HTML Content Processing:
- CMS post/page content needs proper HTML sanitization
- Custom CSS/JS fields in pages (potential XSS)
- User-generated content in comments/descriptions
🚨 Missing Sanitization:
- URL inputs (potential SSRF)
- Sitemap URL processing
- User profile data (name, bio, etc.)
- Search queries and filters
4. Database Input Security (CRITICAL)
Areas Needing Enhancement:

🚨 SQL Injection Prevention:
- Dynamic query building for filters
- Search functionality
- Pagination parameters
- Sorting parameters
🚨 NoSQL Injection (Supabase):
- JSON metadata fields
- Dynamic filter building
- Search parameters
5. Business Logic Validation (MEDIUM PRIORITY)
Missing Validations:

🚨 Rate Limiting & Quotas:
- Bulk URL submission limits
- API request rate validation
- File upload frequency limits
🚨 Business Rules:
- Credit limit validation
- Package upgrade/downgrade rules
- Subscription period validation
- Service account quota limits
🛠️ Step-by-Step Enhancement Plan
Phase 1: Foundation Security (Week 1-2)
Step 1.1: Create Centralized Validation System
// lib/validation/
├── schemas/
│   ├── api-requests.ts      // All API request schemas
│   ├── query-params.ts      // Query parameter schemas
│   ├── file-uploads.ts      // File validation schemas
│   └── business-rules.ts    // Business logic schemas
├── sanitizers/
│   ├── html-sanitizer.ts    // HTML content cleaning
│   ├── url-sanitizer.ts     // URL validation & cleaning
│   └── input-sanitizer.ts   // General input cleaning
├── validators/
│   ├── file-validator.ts    // Advanced file validation
│   ├── rate-limiter.ts      // Request rate validation
│   └── business-validator.ts // Business rule validation
└── middleware/
    ├── validation-middleware.ts // Express/Next.js middleware
    └── error-handler.ts        // Validation error handling
Step 1.2: Enhance Existing Schemas
Expand shared/schema.ts with comprehensive API schemas
Add strict length limits for all text inputs
Add format validation for all specialized fields (URLs, emails, phones)
Add business rule validation (e.g., package limits, quotas)
Step 1.3: Implement Input Sanitization
// Priority sanitization functions:
1. htmlSanitizer() - Remove/escape HTML tags
2. urlSanitizer() - Validate and clean URLs 
3. sqlSanitizer() - Prevent SQL injection
4. xssSanitizer() - Prevent XSS attacks
5. fileContentValidator() - Deep file inspection
Phase 2: API Endpoint Hardening (Week 2-3)
Step 2.1: Query Parameter Validation
// Target endpoints (in priority order):
1. /api/v1/admin/orders/route.ts
2. /api/v1/rank-tracking/keywords/route.ts
3. /api/v1/admin/cms/pages/route.ts
4. /api/revalidate/route.ts
5. All pagination endpoints
// Add validation schemas for:
- Pagination (page, limit with max bounds)
- Filtering (status, dates, amounts with ranges)
- Sorting (allowed fields only)
- Search (length limits, special character handling)
Step 2.2: Request Body Validation
// Target endpoints:
1. Admin user management endpoints
2. Payment/billing endpoints  
3. CMS content endpoints
4. Indexing job endpoints
5. Settings update endpoints
// Add validation for:
- Required fields presence
- Data type validation
- Length constraints
- Format validation (UUIDs, emails, URLs)
- Business rule compliance
Step 2.3: URL Parameter Validation
// Add middleware for:
1. UUID format validation for [id] routes
2. Slug format validation for dynamic routes
3. Parameter existence checks
4. Access control validation
Phase 3: File Upload Security (Week 3-4)
Step 3.1: Advanced File Validation
// Implement in app/api/v1/admin/cms/upload/route.ts:
1. File signature verification (magic bytes)
2. MIME type vs content verification
3. File size limits per file type
4. Image dimension validation
5. PDF structure validation
6. Metadata stripping for privacy
Step 3.2: Malicious Content Detection
// Security checks:
1. Virus scanning integration (if needed)
2. Malicious script detection in files
3. Hidden executable detection
4. Polyglot file detection
5. Content vs extension mismatch detection
Step 3.3: Upload Rate Limiting
// Rate limiting for uploads:
1. Files per user per hour
2. Total upload size per user per day  
3. File type specific limits
4. IP-based rate limiting
Phase 4: XSS & Content Security (Week 4-5)
Step 4.1: HTML Content Sanitization
// Target areas:
1. CMS post content (rich text editor output)
2. CMS page content
3. User profile descriptions
4. Comments or user-generated content
5. Custom CSS/JS fields (admin only)
// Implement:
1. DOMPurify or similar for HTML cleaning
2. Allowlist-based HTML tag filtering
3. CSS sanitization for custom styles
4. JavaScript sanitization (admin-only fields)
Step 4.2: URL & Link Validation
// Enhance URL validation:
1. Protocol allowlist (https, http only)
2. Domain blacklist checking
3. Internal URL vs external URL handling
4. Redirect loop prevention
5. SSRF prevention for sitemap URLs
Phase 5: Database Security (Week 5-6)
Step 5.1: Query Parameter Sanitization
// Target areas:
1. Search functionality
2. Filter building
3. Pagination parameters
4. Sorting parameters
5. Dynamic query construction
// Implement:
1. Parameterized query enforcement
2. Input escaping for dynamic queries
3. Query complexity limits
4. Result set size limits
Step 5.2: JSON Field Validation
// Validate JSON fields:
1. Metadata fields in jobs/transactions
2. Settings JSON objects
3. Custom field storage
4. Configuration objects
// Add:
1. JSON schema validation
2. Field presence validation
3. Value type checking
4. Nested object depth limits
Phase 6: Business Logic Validation (Week 6-7)
Step 6.1: Rate Limiting & Quotas
// Implement business validation:
1. URL submission quotas per user/package
2. Job creation rate limits
3. API request rate limiting per user
4. File upload quotas
5. Service account limits per user
Step 6.2: Package & Subscription Validation
// Business rule validation:
1. Package upgrade/downgrade rules
2. Subscription period validation
3. Credit limit enforcement
4. Feature access control
5. Trial period restrictions
🔧 Implementation Strategy
Technology Stack to Use:
Zod: For schema validation (expand existing usage)
DOMPurify: For HTML sanitization
express-rate-limit: For API rate limiting
multer: For advanced file upload handling
file-type: For file signature verification
validator.js: For additional validation utilities
Integration Approach:
Middleware-First: Create validation middleware for reusability
Schema-Driven: Define schemas first, then implement validation
Error Standardization: Consistent error responses across all endpoints
Testing Integration: Add validation tests for each enhancement
Gradual Rollout: Implement in phases to avoid breaking changes
Success Metrics:
✅ 100% API endpoints have input validation
✅ All file uploads are securely validated
✅ XSS vulnerabilities eliminated
✅ SQL injection prevention verified
✅ Business rule validation enforced
✅ Rate limiting implemented across all endpoints
This comprehensive plan addresses all major input validation weaknesses while building on your existing Zod foundation. Each phase builds upon the previous one, ensuring a systematic approach to strengthening your application's security posture.

Would you like me to proceed with implementing any specific phase, or would you like me to dive deeper into any particular area?