Hi Replit, so as you see I have webapp which is IndexNow a 3rd party to request to GSC API to index a link. This webapp is same and inspirated by Instant Indexing wordpress plugin by RankMath.

So, as this webapp is on development stage and for personal use only. I need you to focus to enhance and fix some problem in dashboard and panel.

Before you do make the changes, I need you to do a deep dive into the codebase, so you do have better understanding about this webapp, the current stage and feature and the obstacles.

Before we more in-deepth about this project. Please take time to read all information in replit.md because there's a lot important things that you should know.

After that, I want you to fix the error when I open manage jobs page

Before, I ask you about this:
Now, I need you to do deep dive again into my codebase, by check all code and read replit.md. I want you to find and list any potential issue, risk, security and potential enhancement that we can do. Then make a plan from P0 first

Then you respond with this:
Based on my comprehensive analysis of the IndexNow Pro codebase, here's my detailed prioritized assessment:

ðŸš¨ PRIORITY 0 (CRITICAL SECURITY RISKS - IMMEDIATE ACTION REQUIRED)
P0.1: Exposed Sensitive Environment Variables
Risk: .env.local contains hardcoded production secrets that are exposed in version control
Impact: Critical security breach - Supabase keys, encryption key, and SMTP credentials exposed
Evidence:
SUPABASE_SERVICE_ROLE_KEY with admin access
ENCRYPTION_KEY used for service account credentials
SMTP credentials for email system
Action: Move to secure environment variable management immediately
P0.2: Weak Encryption Key Management
Risk: 32-character static encryption key in plain text
Impact: All encrypted service accounts can be decrypted if key compromised
Evidence: ENCRYPTION_KEY=11a28471ce34b44641f0b36da9efe38f in .env.local
Action: Implement proper key rotation and secure key storage
P0.3: Missing Input Sanitization for SQL Injection
Risk: Direct string interpolation in search queries
Impact: Potential SQL injection via search parameters
Evidence: query.or(\name.ilike.%${search}%,id.ilike.%${search}%`)in/api/jobs/route.ts`
Action: Implement proper parameterized queries
ðŸ”´ PRIORITY 1 (HIGH RISK - ADDRESS WITHIN 24 HOURS)
P1.1: Debugging Code in Production
Risk: Extensive debug logging and test endpoints active
Impact: Information disclosure, performance degradation
Evidence: Multiple debug console.logs, /api/test-encryption, /api/raw-decrypt-test endpoints
Action: Remove debug code and test endpoints from production
P1.2: Missing Rate Limiting Implementation
Risk: No rate limiting on API endpoints
Impact: API abuse, DoS attacks, quota exhaustion
Evidence: Database has indb_security_rate_limits table but no implementation found
Action: Implement rate limiting middleware
P1.3: Insufficient Error Handling
Risk: Generic error messages hide security issues
Impact: Difficult debugging, potential information leakage
Evidence: Multiple catch blocks with generic "Failed to..." messages
Action: Implement structured error handling with secure logging
P1.4: WebSocket Security Gaps
Risk: No authentication verification for WebSocket connections
Impact: Unauthorized access to real-time updates
Evidence: lib/websocket-service.ts lacks proper auth validation
Action: Add JWT token validation for WebSocket connections
ðŸŸ¡ PRIORITY 2 (MEDIUM RISK - ADDRESS WITHIN 1 WEEK)
P2.1: Performance Issues
Risk: N+1 query problem in service account quota fetching
Impact: Database performance degradation with scale
Evidence: Multiple API calls in app/dashboard/indexnow/page.tsx
Action: Implement batch queries and optimize database access
P2.2: Missing Database Indexes
Risk: Slow queries on frequently accessed columns
Impact: Performance degradation as data grows
Evidence: Search operations on name, status, user_id columns
Action: Add proper database indexes
P2.3: Incomplete RLS (Row Level Security) Implementation
Risk: Potential data leakage between users
Impact: Users accessing other users' data
Evidence: Using supabaseAdmin in API routes without proper user context validation
Action: Review and strengthen RLS policies
ðŸŸ¢ PRIORITY 3 (LOW RISK - ENHANCEMENTS)
P3.1: Monitoring and Alerting
Risk: No system monitoring for errors or performance
Impact: Difficult to detect issues proactively
Action: Implement proper logging and monitoring system
P3.2: Code Quality Improvements
Risk: Technical debt and maintainability issues
Impact: Development velocity and bug introduction
Evidence: Inconsistent error handling patterns, unused imports
Action: Code refactoring and cleanup
P3.3: Email Security Enhancements
Risk: Basic SMTP configuration without advanced security
Impact: Email deliverability and security issues
Action: Implement SPF, DKIM, DMARC validation
ðŸ“‹ IMPLEMENTATION PLAN (P0 FIRST)
Phase 1: Critical Security (P0) - TODAY
Remove all sensitive data from .env.local
Implement secure environment variable management
Fix SQL injection vulnerabilities
Generate new encryption keys and rotate credentials
Phase 2: High Priority Security (P1) - THIS WEEK
Remove debug code and test endpoints
Implement rate limiting
Add WebSocket authentication
Improve error handling
Phase 3: Performance & Medium Risk (P2) - NEXT WEEK
Optimize database queries
Add missing indexes
Strengthen RLS policies
Performance monitoring


For now, please write it to plan.md first, then I'll let you know which part that you need to do first, later one by one.