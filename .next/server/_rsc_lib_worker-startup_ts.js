"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_lib_worker-startup_ts";
exports.ids = ["_rsc_lib_worker-startup_ts"];
exports.modules = {

/***/ "(rsc)/./lib/background-worker.ts":
/*!**********************************!*\
  !*** ./lib/background-worker.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BackgroundWorker: () => (/* binding */ BackgroundWorker),\n/* harmony export */   backgroundWorker: () => (/* binding */ backgroundWorker)\n/* harmony export */ });\n/* harmony import */ var _job_monitor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./job-monitor */ \"(rsc)/./lib/job-monitor.ts\");\n\n/**\n * Background Worker Service\n * \n * Manages all background services for the IndexNow Pro application:\n * - Job monitoring and processing\n * - Cleanup tasks\n * - Health checks\n */ class BackgroundWorker {\n    static getInstance() {\n        if (!BackgroundWorker.instance) {\n            BackgroundWorker.instance = new BackgroundWorker();\n        }\n        return BackgroundWorker.instance;\n    }\n    /**\n   * Start all background services\n   */ start() {\n        if (this.isStarted) {\n            console.log('Background worker is already started');\n            return;\n        }\n        console.log('🚀 Starting IndexNow Pro background worker...');\n        try {\n            // Start job monitor\n            _job_monitor__WEBPACK_IMPORTED_MODULE_0__.jobMonitor.start();\n            this.isStarted = true;\n            console.log('✅ Background worker started successfully');\n            // Log status every 5 minutes\n            setInterval(()=>{\n                this.logStatus();\n            }, 5 * 60 * 1000);\n        } catch (error) {\n            console.error('❌ Failed to start background worker:', error);\n        }\n    }\n    /**\n   * Stop all background services\n   */ stop() {\n        if (!this.isStarted) {\n            console.log('Background worker is not running');\n            return;\n        }\n        console.log('🛑 Stopping background worker...');\n        try {\n            // Stop job monitor\n            _job_monitor__WEBPACK_IMPORTED_MODULE_0__.jobMonitor.stop();\n            this.isStarted = false;\n            console.log('✅ Background worker stopped successfully');\n        } catch (error) {\n            console.error('❌ Error stopping background worker:', error);\n        }\n    }\n    /**\n   * Get worker status\n   */ getStatus() {\n        return {\n            isStarted: this.isStarted,\n            jobMonitor: _job_monitor__WEBPACK_IMPORTED_MODULE_0__.jobMonitor.getStatus(),\n            uptime: this.isStarted ? process.uptime() : undefined\n        };\n    }\n    /**\n   * Log current status\n   */ logStatus() {\n        const status = this.getStatus();\n        console.log('📊 Background Worker Status:', {\n            isStarted: status.isStarted,\n            jobMonitor: status.jobMonitor.isRunning,\n            uptime: status.uptime ? `${Math.round(status.uptime / 60)} minutes` : 'N/A'\n        });\n    }\n    constructor(){\n        this.isStarted = false;\n    }\n}\n// Export singleton instance\nconst backgroundWorker = BackgroundWorker.getInstance();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvYmFja2dyb3VuZC13b3JrZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJDO0FBRTNDOzs7Ozs7O0NBT0MsR0FDTSxNQUFNQztJQUlYLE9BQU9DLGNBQWdDO1FBQ3JDLElBQUksQ0FBQ0QsaUJBQWlCRSxRQUFRLEVBQUU7WUFDOUJGLGlCQUFpQkUsUUFBUSxHQUFHLElBQUlGO1FBQ2xDO1FBQ0EsT0FBT0EsaUJBQWlCRSxRQUFRO0lBQ2xDO0lBRUE7O0dBRUMsR0FDREMsUUFBYztRQUNaLElBQUksSUFBSSxDQUFDQyxTQUFTLEVBQUU7WUFDbEJDLFFBQVFDLEdBQUcsQ0FBQztZQUNaO1FBQ0Y7UUFFQUQsUUFBUUMsR0FBRyxDQUFDO1FBRVosSUFBSTtZQUNGLG9CQUFvQjtZQUNwQlAsb0RBQVVBLENBQUNJLEtBQUs7WUFFaEIsSUFBSSxDQUFDQyxTQUFTLEdBQUc7WUFDakJDLFFBQVFDLEdBQUcsQ0FBQztZQUVaLDZCQUE2QjtZQUM3QkMsWUFBWTtnQkFDVixJQUFJLENBQUNDLFNBQVM7WUFDaEIsR0FBRyxJQUFJLEtBQUs7UUFFZCxFQUFFLE9BQU9DLE9BQU87WUFDZEosUUFBUUksS0FBSyxDQUFDLHdDQUF3Q0E7UUFDeEQ7SUFDRjtJQUVBOztHQUVDLEdBQ0RDLE9BQWE7UUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDTixTQUFTLEVBQUU7WUFDbkJDLFFBQVFDLEdBQUcsQ0FBQztZQUNaO1FBQ0Y7UUFFQUQsUUFBUUMsR0FBRyxDQUFDO1FBRVosSUFBSTtZQUNGLG1CQUFtQjtZQUNuQlAsb0RBQVVBLENBQUNXLElBQUk7WUFFZixJQUFJLENBQUNOLFNBQVMsR0FBRztZQUNqQkMsUUFBUUMsR0FBRyxDQUFDO1FBQ2QsRUFBRSxPQUFPRyxPQUFPO1lBQ2RKLFFBQVFJLEtBQUssQ0FBQyx1Q0FBdUNBO1FBQ3ZEO0lBQ0Y7SUFFQTs7R0FFQyxHQUNERSxZQUlFO1FBQ0EsT0FBTztZQUNMUCxXQUFXLElBQUksQ0FBQ0EsU0FBUztZQUN6QkwsWUFBWUEsb0RBQVVBLENBQUNZLFNBQVM7WUFDaENDLFFBQVEsSUFBSSxDQUFDUixTQUFTLEdBQUdTLFFBQVFELE1BQU0sS0FBS0U7UUFDOUM7SUFDRjtJQUVBOztHQUVDLEdBQ0QsWUFBMEI7UUFDeEIsTUFBTUMsU0FBUyxJQUFJLENBQUNKLFNBQVM7UUFDN0JOLFFBQVFDLEdBQUcsQ0FBQyxnQ0FBZ0M7WUFDMUNGLFdBQVdXLE9BQU9YLFNBQVM7WUFDM0JMLFlBQVlnQixPQUFPaEIsVUFBVSxDQUFDaUIsU0FBUztZQUN2Q0osUUFBUUcsT0FBT0gsTUFBTSxHQUFHLEdBQUdLLEtBQUtDLEtBQUssQ0FBQ0gsT0FBT0gsTUFBTSxHQUFHLElBQUksUUFBUSxDQUFDLEdBQUc7UUFDeEU7SUFDRjs7YUFwRlFSLFlBQVk7O0FBcUZ0QjtBQUVBLDRCQUE0QjtBQUNyQixNQUFNZSxtQkFBbUJuQixpQkFBaUJDLFdBQVcsR0FBRyIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9saWIvYmFja2dyb3VuZC13b3JrZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgam9iTW9uaXRvciB9IGZyb20gJy4vam9iLW1vbml0b3InO1xuXG4vKipcbiAqIEJhY2tncm91bmQgV29ya2VyIFNlcnZpY2VcbiAqIFxuICogTWFuYWdlcyBhbGwgYmFja2dyb3VuZCBzZXJ2aWNlcyBmb3IgdGhlIEluZGV4Tm93IFBybyBhcHBsaWNhdGlvbjpcbiAqIC0gSm9iIG1vbml0b3JpbmcgYW5kIHByb2Nlc3NpbmdcbiAqIC0gQ2xlYW51cCB0YXNrc1xuICogLSBIZWFsdGggY2hlY2tzXG4gKi9cbmV4cG9ydCBjbGFzcyBCYWNrZ3JvdW5kV29ya2VyIHtcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEJhY2tncm91bmRXb3JrZXI7XG4gIHByaXZhdGUgaXNTdGFydGVkID0gZmFsc2U7XG5cbiAgc3RhdGljIGdldEluc3RhbmNlKCk6IEJhY2tncm91bmRXb3JrZXIge1xuICAgIGlmICghQmFja2dyb3VuZFdvcmtlci5pbnN0YW5jZSkge1xuICAgICAgQmFja2dyb3VuZFdvcmtlci5pbnN0YW5jZSA9IG5ldyBCYWNrZ3JvdW5kV29ya2VyKCk7XG4gICAgfVxuICAgIHJldHVybiBCYWNrZ3JvdW5kV29ya2VyLmluc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGFsbCBiYWNrZ3JvdW5kIHNlcnZpY2VzXG4gICAqL1xuICBzdGFydCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc1N0YXJ0ZWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kIHdvcmtlciBpcyBhbHJlYWR5IHN0YXJ0ZWQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygn8J+agCBTdGFydGluZyBJbmRleE5vdyBQcm8gYmFja2dyb3VuZCB3b3JrZXIuLi4nKTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgLy8gU3RhcnQgam9iIG1vbml0b3JcbiAgICAgIGpvYk1vbml0b3Iuc3RhcnQoKTtcbiAgICAgIFxuICAgICAgdGhpcy5pc1N0YXJ0ZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS5sb2coJ+KchSBCYWNrZ3JvdW5kIHdvcmtlciBzdGFydGVkIHN1Y2Nlc3NmdWxseScpO1xuICAgICAgXG4gICAgICAvLyBMb2cgc3RhdHVzIGV2ZXJ5IDUgbWludXRlc1xuICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICB0aGlzLmxvZ1N0YXR1cygpO1xuICAgICAgfSwgNSAqIDYwICogMTAwMCk7XG4gICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byBzdGFydCBiYWNrZ3JvdW5kIHdvcmtlcjonLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0b3AgYWxsIGJhY2tncm91bmQgc2VydmljZXNcbiAgICovXG4gIHN0b3AoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlzU3RhcnRlZCkge1xuICAgICAgY29uc29sZS5sb2coJ0JhY2tncm91bmQgd29ya2VyIGlzIG5vdCBydW5uaW5nJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coJ/Cfm5EgU3RvcHBpbmcgYmFja2dyb3VuZCB3b3JrZXIuLi4nKTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgLy8gU3RvcCBqb2IgbW9uaXRvclxuICAgICAgam9iTW9uaXRvci5zdG9wKCk7XG4gICAgICBcbiAgICAgIHRoaXMuaXNTdGFydGVkID0gZmFsc2U7XG4gICAgICBjb25zb2xlLmxvZygn4pyFIEJhY2tncm91bmQgd29ya2VyIHN0b3BwZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBzdG9wcGluZyBiYWNrZ3JvdW5kIHdvcmtlcjonLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB3b3JrZXIgc3RhdHVzXG4gICAqL1xuICBnZXRTdGF0dXMoKToge1xuICAgIGlzU3RhcnRlZDogYm9vbGVhbjtcbiAgICBqb2JNb25pdG9yOiBhbnk7XG4gICAgdXB0aW1lPzogbnVtYmVyO1xuICB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNTdGFydGVkOiB0aGlzLmlzU3RhcnRlZCxcbiAgICAgIGpvYk1vbml0b3I6IGpvYk1vbml0b3IuZ2V0U3RhdHVzKCksXG4gICAgICB1cHRpbWU6IHRoaXMuaXNTdGFydGVkID8gcHJvY2Vzcy51cHRpbWUoKSA6IHVuZGVmaW5lZFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogTG9nIGN1cnJlbnQgc3RhdHVzXG4gICAqL1xuICBwcml2YXRlIGxvZ1N0YXR1cygpOiB2b2lkIHtcbiAgICBjb25zdCBzdGF0dXMgPSB0aGlzLmdldFN0YXR1cygpO1xuICAgIGNvbnNvbGUubG9nKCfwn5OKIEJhY2tncm91bmQgV29ya2VyIFN0YXR1czonLCB7XG4gICAgICBpc1N0YXJ0ZWQ6IHN0YXR1cy5pc1N0YXJ0ZWQsXG4gICAgICBqb2JNb25pdG9yOiBzdGF0dXMuam9iTW9uaXRvci5pc1J1bm5pbmcsXG4gICAgICB1cHRpbWU6IHN0YXR1cy51cHRpbWUgPyBgJHtNYXRoLnJvdW5kKHN0YXR1cy51cHRpbWUgLyA2MCl9IG1pbnV0ZXNgIDogJ04vQSdcbiAgICB9KTtcbiAgfVxufVxuXG4vLyBFeHBvcnQgc2luZ2xldG9uIGluc3RhbmNlXG5leHBvcnQgY29uc3QgYmFja2dyb3VuZFdvcmtlciA9IEJhY2tncm91bmRXb3JrZXIuZ2V0SW5zdGFuY2UoKTsiXSwibmFtZXMiOlsiam9iTW9uaXRvciIsIkJhY2tncm91bmRXb3JrZXIiLCJnZXRJbnN0YW5jZSIsImluc3RhbmNlIiwic3RhcnQiLCJpc1N0YXJ0ZWQiLCJjb25zb2xlIiwibG9nIiwic2V0SW50ZXJ2YWwiLCJsb2dTdGF0dXMiLCJlcnJvciIsInN0b3AiLCJnZXRTdGF0dXMiLCJ1cHRpbWUiLCJwcm9jZXNzIiwidW5kZWZpbmVkIiwic3RhdHVzIiwiaXNSdW5uaW5nIiwiTWF0aCIsInJvdW5kIiwiYmFja2dyb3VuZFdvcmtlciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/background-worker.ts\n");

/***/ }),

/***/ "(rsc)/./lib/encryption.ts":
/*!***************************!*\
  !*** ./lib/encryption.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EncryptionService: () => (/* binding */ EncryptionService)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n * Simple encryption utility for securing sensitive data\n * Uses AES-256-CBC with proper IV handling\n */ class EncryptionService {\n    static{\n        this.ALGORITHM = 'aes-256-cbc';\n    }\n    static{\n        this.IV_LENGTH = 16;\n    }\n    static getEncryptionKey() {\n        const key = process.env.ENCRYPTION_KEY;\n        if (!key) {\n            throw new Error('ENCRYPTION_KEY environment variable is required');\n        }\n        if (key.length !== 32) {\n            throw new Error('ENCRYPTION_KEY must be exactly 32 characters long');\n        }\n        return Buffer.from(key, 'utf8');\n    }\n    /**\n   * Encrypt sensitive data\n   * Format: IV:EncryptedData\n   */ static encrypt(text) {\n        try {\n            const key = this.getEncryptionKey();\n            const iv = crypto__WEBPACK_IMPORTED_MODULE_0___default().randomBytes(this.IV_LENGTH);\n            const cipher = crypto__WEBPACK_IMPORTED_MODULE_0___default().createCipheriv(this.ALGORITHM, key, iv);\n            let encrypted = cipher.update(text, 'utf8', 'hex');\n            encrypted += cipher.final('hex');\n            return iv.toString('hex') + ':' + encrypted;\n        } catch (error) {\n            console.error('Encryption error:', error);\n            throw new Error('Failed to encrypt data');\n        }\n    }\n    /**\n   * Decrypt sensitive data\n   * Expects format: IV:EncryptedData\n   */ static decrypt(encryptedText) {\n        try {\n            const key = this.getEncryptionKey();\n            const parts = encryptedText.split(':');\n            if (parts.length !== 2) {\n                throw new Error('Invalid encrypted data format - expected IV:EncryptedData');\n            }\n            const iv = Buffer.from(parts[0], 'hex');\n            const encryptedData = parts[1];\n            const decipher = crypto__WEBPACK_IMPORTED_MODULE_0___default().createDecipheriv(this.ALGORITHM, key, iv);\n            let decrypted = decipher.update(encryptedData, 'hex', 'utf8');\n            decrypted += decipher.final('utf8');\n            return decrypted;\n        } catch (error) {\n            console.error('Decryption error:', error);\n            throw new Error('Failed to decrypt data');\n        }\n    }\n    /**\n   * Test if encrypted data can be decrypted with current key\n   */ static testDecryption(encryptedText) {\n        try {\n            this.decrypt(encryptedText);\n            return true;\n        } catch (error) {\n            return false;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZW5jcnlwdGlvbi50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEI7QUFFNUI7OztDQUdDLEdBQ00sTUFBTUM7O2FBQ2FDLFlBQVk7OzthQUNaQyxZQUFZOztJQUVwQyxPQUFlQyxtQkFBMkI7UUFDeEMsTUFBTUMsTUFBTUMsUUFBUUMsR0FBRyxDQUFDQyxjQUFjO1FBQ3RDLElBQUksQ0FBQ0gsS0FBSztZQUNSLE1BQU0sSUFBSUksTUFBTTtRQUNsQjtRQUNBLElBQUlKLElBQUlLLE1BQU0sS0FBSyxJQUFJO1lBQ3JCLE1BQU0sSUFBSUQsTUFBTTtRQUNsQjtRQUNBLE9BQU9FLE9BQU9DLElBQUksQ0FBQ1AsS0FBSztJQUMxQjtJQUVBOzs7R0FHQyxHQUNELE9BQU9RLFFBQVFDLElBQVksRUFBVTtRQUNuQyxJQUFJO1lBQ0YsTUFBTVQsTUFBTSxJQUFJLENBQUNELGdCQUFnQjtZQUNqQyxNQUFNVyxLQUFLZix5REFBa0IsQ0FBQyxJQUFJLENBQUNHLFNBQVM7WUFDNUMsTUFBTWMsU0FBU2pCLDREQUFxQixDQUFDLElBQUksQ0FBQ0UsU0FBUyxFQUFFRyxLQUFLVTtZQUUxRCxJQUFJSSxZQUFZRixPQUFPRyxNQUFNLENBQUNOLE1BQU0sUUFBUTtZQUM1Q0ssYUFBYUYsT0FBT0ksS0FBSyxDQUFDO1lBRTFCLE9BQU9OLEdBQUdPLFFBQVEsQ0FBQyxTQUFTLE1BQU1IO1FBQ3BDLEVBQUUsT0FBT0ksT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMscUJBQXFCQTtZQUNuQyxNQUFNLElBQUlkLE1BQU07UUFDbEI7SUFDRjtJQUVBOzs7R0FHQyxHQUNELE9BQU9nQixRQUFRQyxhQUFxQixFQUFVO1FBQzVDLElBQUk7WUFDRixNQUFNckIsTUFBTSxJQUFJLENBQUNELGdCQUFnQjtZQUNqQyxNQUFNdUIsUUFBUUQsY0FBY0UsS0FBSyxDQUFDO1lBRWxDLElBQUlELE1BQU1qQixNQUFNLEtBQUssR0FBRztnQkFDdEIsTUFBTSxJQUFJRCxNQUFNO1lBQ2xCO1lBRUEsTUFBTU0sS0FBS0osT0FBT0MsSUFBSSxDQUFDZSxLQUFLLENBQUMsRUFBRSxFQUFFO1lBQ2pDLE1BQU1FLGdCQUFnQkYsS0FBSyxDQUFDLEVBQUU7WUFFOUIsTUFBTUcsV0FBVzlCLDhEQUF1QixDQUFDLElBQUksQ0FBQ0UsU0FBUyxFQUFFRyxLQUFLVTtZQUM5RCxJQUFJaUIsWUFBWUYsU0FBU1YsTUFBTSxDQUFDUyxlQUFlLE9BQU87WUFDdERHLGFBQWFGLFNBQVNULEtBQUssQ0FBQztZQUU1QixPQUFPVztRQUNULEVBQUUsT0FBT1QsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMscUJBQXFCQTtZQUNuQyxNQUFNLElBQUlkLE1BQU07UUFDbEI7SUFDRjtJQUVBOztHQUVDLEdBQ0QsT0FBT3dCLGVBQWVQLGFBQXFCLEVBQVc7UUFDcEQsSUFBSTtZQUNGLElBQUksQ0FBQ0QsT0FBTyxDQUFDQztZQUNiLE9BQU87UUFDVCxFQUFFLE9BQU9ILE9BQU87WUFDZCxPQUFPO1FBQ1Q7SUFDRjtBQUNGIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL2xpYi9lbmNyeXB0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuLyoqXG4gKiBTaW1wbGUgZW5jcnlwdGlvbiB1dGlsaXR5IGZvciBzZWN1cmluZyBzZW5zaXRpdmUgZGF0YVxuICogVXNlcyBBRVMtMjU2LUNCQyB3aXRoIHByb3BlciBJViBoYW5kbGluZ1xuICovXG5leHBvcnQgY2xhc3MgRW5jcnlwdGlvblNlcnZpY2Uge1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBBTEdPUklUSE0gPSAnYWVzLTI1Ni1jYmMnO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBJVl9MRU5HVEggPSAxNjtcbiAgXG4gIHByaXZhdGUgc3RhdGljIGdldEVuY3J5cHRpb25LZXkoKTogQnVmZmVyIHtcbiAgICBjb25zdCBrZXkgPSBwcm9jZXNzLmVudi5FTkNSWVBUSU9OX0tFWTtcbiAgICBpZiAoIWtleSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFTkNSWVBUSU9OX0tFWSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyByZXF1aXJlZCcpO1xuICAgIH1cbiAgICBpZiAoa2V5Lmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRU5DUllQVElPTl9LRVkgbXVzdCBiZSBleGFjdGx5IDMyIGNoYXJhY3RlcnMgbG9uZycpO1xuICAgIH1cbiAgICByZXR1cm4gQnVmZmVyLmZyb20oa2V5LCAndXRmOCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuY3J5cHQgc2Vuc2l0aXZlIGRhdGFcbiAgICogRm9ybWF0OiBJVjpFbmNyeXB0ZWREYXRhXG4gICAqL1xuICBzdGF0aWMgZW5jcnlwdCh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBrZXkgPSB0aGlzLmdldEVuY3J5cHRpb25LZXkoKTtcbiAgICAgIGNvbnN0IGl2ID0gY3J5cHRvLnJhbmRvbUJ5dGVzKHRoaXMuSVZfTEVOR1RIKTtcbiAgICAgIGNvbnN0IGNpcGhlciA9IGNyeXB0by5jcmVhdGVDaXBoZXJpdih0aGlzLkFMR09SSVRITSwga2V5LCBpdik7XG4gICAgICBcbiAgICAgIGxldCBlbmNyeXB0ZWQgPSBjaXBoZXIudXBkYXRlKHRleHQsICd1dGY4JywgJ2hleCcpO1xuICAgICAgZW5jcnlwdGVkICs9IGNpcGhlci5maW5hbCgnaGV4Jyk7XG4gICAgICBcbiAgICAgIHJldHVybiBpdi50b1N0cmluZygnaGV4JykgKyAnOicgKyBlbmNyeXB0ZWQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0VuY3J5cHRpb24gZXJyb3I6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZW5jcnlwdCBkYXRhJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlY3J5cHQgc2Vuc2l0aXZlIGRhdGFcbiAgICogRXhwZWN0cyBmb3JtYXQ6IElWOkVuY3J5cHRlZERhdGFcbiAgICovXG4gIHN0YXRpYyBkZWNyeXB0KGVuY3J5cHRlZFRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGtleSA9IHRoaXMuZ2V0RW5jcnlwdGlvbktleSgpO1xuICAgICAgY29uc3QgcGFydHMgPSBlbmNyeXB0ZWRUZXh0LnNwbGl0KCc6Jyk7XG4gICAgICBcbiAgICAgIGlmIChwYXJ0cy5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGVuY3J5cHRlZCBkYXRhIGZvcm1hdCAtIGV4cGVjdGVkIElWOkVuY3J5cHRlZERhdGEnKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgaXYgPSBCdWZmZXIuZnJvbShwYXJ0c1swXSwgJ2hleCcpO1xuICAgICAgY29uc3QgZW5jcnlwdGVkRGF0YSA9IHBhcnRzWzFdO1xuICAgICAgXG4gICAgICBjb25zdCBkZWNpcGhlciA9IGNyeXB0by5jcmVhdGVEZWNpcGhlcml2KHRoaXMuQUxHT1JJVEhNLCBrZXksIGl2KTtcbiAgICAgIGxldCBkZWNyeXB0ZWQgPSBkZWNpcGhlci51cGRhdGUoZW5jcnlwdGVkRGF0YSwgJ2hleCcsICd1dGY4Jyk7XG4gICAgICBkZWNyeXB0ZWQgKz0gZGVjaXBoZXIuZmluYWwoJ3V0ZjgnKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIGRlY3J5cHRlZDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRGVjcnlwdGlvbiBlcnJvcjonLCBlcnJvcik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBkZWNyeXB0IGRhdGEnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGVzdCBpZiBlbmNyeXB0ZWQgZGF0YSBjYW4gYmUgZGVjcnlwdGVkIHdpdGggY3VycmVudCBrZXlcbiAgICovXG4gIHN0YXRpYyB0ZXN0RGVjcnlwdGlvbihlbmNyeXB0ZWRUZXh0OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5kZWNyeXB0KGVuY3J5cHRlZFRleHQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0iXSwibmFtZXMiOlsiY3J5cHRvIiwiRW5jcnlwdGlvblNlcnZpY2UiLCJBTEdPUklUSE0iLCJJVl9MRU5HVEgiLCJnZXRFbmNyeXB0aW9uS2V5Iiwia2V5IiwicHJvY2VzcyIsImVudiIsIkVOQ1JZUFRJT05fS0VZIiwiRXJyb3IiLCJsZW5ndGgiLCJCdWZmZXIiLCJmcm9tIiwiZW5jcnlwdCIsInRleHQiLCJpdiIsInJhbmRvbUJ5dGVzIiwiY2lwaGVyIiwiY3JlYXRlQ2lwaGVyaXYiLCJlbmNyeXB0ZWQiLCJ1cGRhdGUiLCJmaW5hbCIsInRvU3RyaW5nIiwiZXJyb3IiLCJjb25zb2xlIiwiZGVjcnlwdCIsImVuY3J5cHRlZFRleHQiLCJwYXJ0cyIsInNwbGl0IiwiZW5jcnlwdGVkRGF0YSIsImRlY2lwaGVyIiwiY3JlYXRlRGVjaXBoZXJpdiIsImRlY3J5cHRlZCIsInRlc3REZWNyeXB0aW9uIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/encryption.ts\n");

/***/ }),

/***/ "(rsc)/./lib/google-auth-service.ts":
/*!************************************!*\
  !*** ./lib/google-auth-service.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleAuthService: () => (/* binding */ GoogleAuthService)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(rsc)/./lib/supabase.ts\");\n/* harmony import */ var _encryption__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encryption */ \"(rsc)/./lib/encryption.ts\");\n/* harmony import */ var google_auth_library__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\n\n\n\n/**\n * Google Authentication Service\n * \n * Handles the complete Google API authentication workflow:\n * 1. Decrypt service account credentials from database\n * 2. Generate JWT tokens using service account private key\n * 3. Exchange JWT for access tokens with Google's token endpoint\n * 4. Cache encrypted access tokens in database with expiration\n * 5. Manage token refresh and quota tracking\n */ class GoogleAuthService {\n    static{\n        this.INDEXING_SCOPE = 'https://www.googleapis.com/auth/indexing';\n    }\n    static{\n        this.TOKEN_EXPIRY_BUFFER = 5 * 60 * 1000; // 5 minutes buffer\n    }\n    static getInstance() {\n        if (!GoogleAuthService.instance) {\n            GoogleAuthService.instance = new GoogleAuthService();\n        }\n        return GoogleAuthService.instance;\n    }\n    /**\n   * Get a valid access token for Google API calls\n   * First checks cached token in database, then generates new one if needed\n   */ async getAccessToken(serviceAccountId) {\n        try {\n            console.log(`🔑 Getting access token for service account: ${serviceAccountId}`);\n            // Get service account from database\n            const { data: serviceAccount, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_google_service_accounts').select('*').eq('id', serviceAccountId).single();\n            if (error || !serviceAccount) {\n                console.error('Service account not found:', error);\n                return null;\n            }\n            // Check if we have a valid cached token\n            const cachedToken = await this.getCachedAccessToken(serviceAccount);\n            if (cachedToken) {\n                console.log('✅ Using cached access token');\n                return cachedToken;\n            }\n            // Generate new access token\n            console.log('🔄 Generating new access token');\n            const newToken = await this.generateNewAccessToken(serviceAccount);\n            if (newToken) {\n                // Cache the new token in database\n                await this.cacheAccessToken(serviceAccountId, newToken);\n                console.log('✅ New access token generated and cached');\n                return newToken.access_token;\n            }\n            return null;\n        } catch (error) {\n            console.error('Error getting access token:', error);\n            return null;\n        }\n    }\n    /**\n   * Get available service account for a user\n   */ async getAvailableServiceAccount(userId) {\n        try {\n            const { data: accounts, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_google_service_accounts').select('*').eq('user_id', userId).eq('is_active', true).limit(1);\n            if (error || !accounts?.length) {\n                console.log('No active service accounts found for user:', userId);\n                return null;\n            }\n            return accounts[0];\n        } catch (error) {\n            console.error('Error getting service account:', error);\n            return null;\n        }\n    }\n    /**\n   * Check if we have a valid cached access token\n   */ async getCachedAccessToken(serviceAccount) {\n        try {\n            if (!serviceAccount.encrypted_access_token || !serviceAccount.access_token_expires_at) {\n                return null;\n            }\n            const expiresAt = new Date(serviceAccount.access_token_expires_at).getTime();\n            const now = Date.now();\n            // Check if token is still valid (with buffer)\n            if (expiresAt <= now + GoogleAuthService.TOKEN_EXPIRY_BUFFER) {\n                console.log('Cached token expired or expiring soon');\n                return null;\n            }\n            // Decrypt and return cached token\n            const accessToken = _encryption__WEBPACK_IMPORTED_MODULE_1__.EncryptionService.decrypt(serviceAccount.encrypted_access_token);\n            return accessToken;\n        } catch (error) {\n            console.error('Error checking cached token:', error);\n            return null;\n        }\n    }\n    /**\n   * Generate new access token using service account credentials\n   */ async generateNewAccessToken(serviceAccount) {\n        try {\n            // Decrypt service account credentials\n            const credentialsJson = _encryption__WEBPACK_IMPORTED_MODULE_1__.EncryptionService.decrypt(serviceAccount.encrypted_credentials);\n            const credentials = JSON.parse(credentialsJson);\n            console.log('🔐 Creating JWT with service account credentials');\n            // Create JWT client\n            const jwtClient = new google_auth_library__WEBPACK_IMPORTED_MODULE_2__.JWT({\n                email: credentials.client_email,\n                key: credentials.private_key,\n                scopes: [\n                    GoogleAuthService.INDEXING_SCOPE\n                ]\n            });\n            // Get access token\n            const tokenResponse = await jwtClient.authorize();\n            if (!tokenResponse.access_token) {\n                throw new Error('No access token received from Google');\n            }\n            console.log('✅ Successfully obtained access token from Google');\n            return {\n                access_token: tokenResponse.access_token,\n                expires_in: 3600 // Google tokens typically expire in 1 hour\n            };\n        } catch (error) {\n            console.error('Error generating access token:', error);\n            return null;\n        }\n    }\n    /**\n   * Cache encrypted access token in database\n   */ async cacheAccessToken(serviceAccountId, tokenData) {\n        try {\n            // Encrypt access token\n            const encryptedToken = _encryption__WEBPACK_IMPORTED_MODULE_1__.EncryptionService.encrypt(tokenData.access_token);\n            // Calculate expiration time (with some buffer)\n            const expiresAt = new Date(Date.now() + tokenData.expires_in * 1000 - GoogleAuthService.TOKEN_EXPIRY_BUFFER);\n            // Update service account with cached token\n            const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_google_service_accounts').update({\n                encrypted_access_token: encryptedToken,\n                access_token_expires_at: expiresAt.toISOString(),\n                updated_at: new Date().toISOString()\n            }).eq('id', serviceAccountId);\n            if (error) {\n                console.error('Error caching access token:', error);\n            } else {\n                console.log('✅ Access token cached in database');\n            }\n        } catch (error) {\n            console.error('Error caching access token:', error);\n        }\n    }\n    /**\n   * Validate service account credentials format\n   */ static validateServiceAccountCredentials(credentialsJson) {\n        try {\n            const credentials = JSON.parse(credentialsJson);\n            const requiredFields = [\n                'type',\n                'project_id',\n                'private_key_id',\n                'private_key',\n                'client_email',\n                'client_id',\n                'auth_uri',\n                'token_uri'\n            ];\n            return requiredFields.every((field)=>credentials[field]);\n        } catch (error) {\n            return false;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-auth-service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/google-indexing-processor.ts":
/*!******************************************!*\
  !*** ./lib/google-indexing-processor.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleIndexingProcessor: () => (/* binding */ GoogleIndexingProcessor)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(rsc)/./lib/supabase.ts\");\n/* harmony import */ var _google_auth_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./google-auth-service */ \"(rsc)/./lib/google-auth-service.ts\");\n\n\n/**\n * Google Indexing Processor\n * \n * Professional-grade URL indexing system that integrates with Google's Indexing API\n * to automatically submit URLs for indexing with proper error handling, retry logic,\n * and quota management across multiple service accounts.\n */ class GoogleIndexingProcessor {\n    constructor(){\n        this.processingJobs = new Set();\n        this.googleAuth = _google_auth_service__WEBPACK_IMPORTED_MODULE_1__.GoogleAuthService.getInstance();\n    }\n    static getInstance() {\n        if (!GoogleIndexingProcessor.instance) {\n            GoogleIndexingProcessor.instance = new GoogleIndexingProcessor();\n        }\n        return GoogleIndexingProcessor.instance;\n    }\n    /**\n   * Process a complete indexing job\n   * Extracts URLs, creates submissions, and processes each URL through Google's API\n   */ async processIndexingJob(jobId) {\n        if (this.processingJobs.has(jobId)) {\n            return {\n                success: false,\n                error: 'Job is already being processed'\n            };\n        }\n        try {\n            // Lock the job to prevent concurrent processing\n            const lockResult = await this.lockJobForProcessing(jobId);\n            if (!lockResult) {\n                return {\n                    success: false,\n                    error: 'Failed to lock job - may already be processing'\n                };\n            }\n            this.processingJobs.add(jobId);\n            console.log(`🚀 Starting indexing job ${jobId}`);\n            // Get job details\n            const job = await this.getJobDetails(jobId);\n            if (!job) {\n                return {\n                    success: false,\n                    error: 'Job not found'\n                };\n            }\n            // Update job status to running\n            await this.updateJobStatus(jobId, 'running', {\n                started_at: new Date().toISOString(),\n                processed_urls: 0,\n                successful_urls: 0,\n                failed_urls: 0,\n                progress_percentage: 0\n            });\n            // Extract URLs from job source data\n            const urls = await this.extractUrlsFromJobSource(job);\n            if (urls.length === 0) {\n                throw new Error('No URLs found to process in job source data');\n            }\n            console.log(`📋 Found ${urls.length} URLs to process`);\n            // Create URL submissions for tracking\n            await this.createUrlSubmissionsForJob(jobId, urls);\n            // Process all URLs through Google's Indexing API\n            await this.processUrlSubmissionsWithGoogleAPI(job);\n            // Mark job as completed\n            await this.updateJobStatus(jobId, 'completed', {\n                completed_at: new Date().toISOString(),\n                locked_at: null,\n                locked_by: null\n            });\n            console.log(`✅ Indexing job ${jobId} completed successfully`);\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(`❌ Indexing job ${jobId} failed:`, error);\n            // Mark job as failed\n            await this.updateJobStatus(jobId, 'failed', {\n                error_message: error instanceof Error ? error.message : 'Unknown error',\n                locked_at: null,\n                locked_by: null\n            });\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        } finally{\n            this.processingJobs.delete(jobId);\n        }\n    }\n    /**\n   * Extract URLs from job source data based on job type\n   */ async extractUrlsFromJobSource(job) {\n        try {\n            if (job.type === 'manual') {\n                // For manual jobs, URLs are stored in source_data.urls\n                const urls = job.source_data?.urls || [];\n                console.log(`📝 Manual job: extracted ${urls.length} URLs`);\n                return urls;\n            } else if (job.type === 'sitemap') {\n                // For sitemap jobs, parse the sitemap URL\n                const sitemapUrl = job.source_data?.sitemapUrl;\n                if (!sitemapUrl) {\n                    throw new Error('No sitemap URL found in job source data');\n                }\n                console.log(`🗺️ Sitemap job: parsing ${sitemapUrl}`);\n                return await this.parseSitemapUrls(sitemapUrl);\n            }\n            return [];\n        } catch (error) {\n            console.error('Error extracting URLs from job source:', error);\n            throw error;\n        }\n    }\n    /**\n   * Parse sitemap XML to extract all URLs\n   */ async parseSitemapUrls(sitemapUrl) {\n        try {\n            console.log(`🔍 Fetching sitemap: ${sitemapUrl}`);\n            const response = await fetch(sitemapUrl);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch sitemap: ${response.status} ${response.statusText}`);\n            }\n            const xmlContent = await response.text();\n            const xml2js = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/xmlbuilder\"), __webpack_require__.e(\"vendor-chunks/xml2js\"), __webpack_require__.e(\"vendor-chunks/sax\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! xml2js */ \"(rsc)/./node_modules/xml2js/lib/xml2js.js\", 23));\n            const parser = new xml2js.Parser();\n            const parsedXml = await parser.parseStringPromise(xmlContent);\n            const urls = [];\n            // Handle regular sitemap with URL entries\n            if (parsedXml.urlset?.url) {\n                parsedXml.urlset.url.forEach((urlEntry)=>{\n                    if (urlEntry.loc?.[0]) {\n                        urls.push(urlEntry.loc[0]);\n                    }\n                });\n            }\n            // Handle sitemap index with nested sitemaps\n            if (parsedXml.sitemapindex?.sitemap) {\n                for (const sitemapEntry of parsedXml.sitemapindex.sitemap){\n                    if (sitemapEntry.loc?.[0]) {\n                        const nestedUrls = await this.parseSitemapUrls(sitemapEntry.loc[0]);\n                        urls.push(...nestedUrls);\n                    }\n                }\n            }\n            console.log(`✅ Extracted ${urls.length} URLs from sitemap`);\n            return urls;\n        } catch (error) {\n            console.error('Error parsing sitemap:', error);\n            throw new Error(`Sitemap parsing failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    /**\n   * Create URL submission records for tracking individual URL processing\n   */ async createUrlSubmissionsForJob(jobId, urls) {\n        try {\n            console.log(`📊 Creating ${urls.length} URL submission records`);\n            const submissions = urls.map((url)=>({\n                    job_id: jobId,\n                    url: url,\n                    status: 'pending',\n                    retry_count: 0,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                }));\n            // Insert submissions in batches to avoid database limits\n            const batchSize = 100;\n            for(let i = 0; i < submissions.length; i += batchSize){\n                const batch = submissions.slice(i, i + batchSize);\n                const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_url_submissions').insert(batch);\n                if (error) {\n                    throw new Error(`Failed to create URL submissions: ${error.message}`);\n                }\n            }\n            // Update job with total URL count\n            await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_jobs').update({\n                total_urls: urls.length,\n                updated_at: new Date().toISOString()\n            }).eq('id', jobId);\n            console.log(`✅ Created ${urls.length} URL submission records`);\n        } catch (error) {\n            console.error('Error creating URL submissions:', error);\n            throw error;\n        }\n    }\n    /**\n   * Process all URL submissions through Google's Indexing API\n   */ async processUrlSubmissionsWithGoogleAPI(job) {\n        try {\n            console.log(`🔄 Processing URL submissions for job ${job.id}`);\n            // Get active service accounts for load balancing\n            const { data: serviceAccounts, error: saError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_google_service_accounts').select('*').eq('user_id', job.user_id).eq('is_active', true);\n            if (saError || !serviceAccounts || serviceAccounts.length === 0) {\n                throw new Error('No active Google service accounts found for user');\n            }\n            console.log(`📈 Using ${serviceAccounts.length} service accounts for load balancing`);\n            // Get pending submissions for this job\n            const { data: submissions, error: subError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_url_submissions').select('*').eq('job_id', job.id).eq('status', 'pending').order('created_at');\n            if (subError) {\n                throw new Error(`Error fetching URL submissions: ${subError.message}`);\n            }\n            if (!submissions || submissions.length === 0) {\n                console.log('⚠️ No pending submissions found for processing');\n                return;\n            }\n            console.log(`🎯 Processing ${submissions.length} URL submissions`);\n            let processed = 0;\n            let successful = 0;\n            let failed = 0;\n            // Process each URL submission\n            for (const submission of submissions){\n                try {\n                    // Round-robin service account selection for load balancing\n                    const serviceAccount = serviceAccounts[processed % serviceAccounts.length];\n                    // Get access token for Google API\n                    const accessToken = await this.googleAuth.getAccessToken(serviceAccount.id);\n                    if (!accessToken) {\n                        throw new Error('Failed to obtain Google API access token');\n                    }\n                    // Submit URL to Google's Indexing API\n                    await this.submitUrlToGoogleIndexingAPI(submission.url, accessToken);\n                    // Update submission as successful\n                    await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_url_submissions').update({\n                        status: 'submitted',\n                        submitted_at: new Date().toISOString(),\n                        service_account_id: serviceAccount.id,\n                        updated_at: new Date().toISOString()\n                    }).eq('id', submission.id);\n                    successful++;\n                    console.log(`✅ Successfully indexed: ${submission.url}`);\n                } catch (error) {\n                    console.error(`❌ Failed to index ${submission.url}:`, error);\n                    // Update submission as failed\n                    await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_url_submissions').update({\n                        status: 'failed',\n                        error_message: error instanceof Error ? error.message : 'Indexing failed',\n                        retry_count: submission.retry_count + 1,\n                        updated_at: new Date().toISOString()\n                    }).eq('id', submission.id);\n                    failed++;\n                }\n                processed++;\n                // Update job progress in real-time\n                const progressPercentage = Math.round(processed / submissions.length * 100);\n                await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_jobs').update({\n                    processed_urls: processed,\n                    successful_urls: successful,\n                    failed_urls: failed,\n                    progress_percentage: progressPercentage,\n                    updated_at: new Date().toISOString()\n                }).eq('id', job.id);\n                // Respect Google API rate limits\n                await new Promise((resolve)=>setTimeout(resolve, 100));\n            }\n            console.log(`📊 Job processing complete: ${successful} successful, ${failed} failed out of ${processed} total`);\n        } catch (error) {\n            console.error('Error processing URL submissions:', error);\n            throw error;\n        }\n    }\n    /**\n   * Submit individual URL to Google's Indexing API\n   */ async submitUrlToGoogleIndexingAPI(url, accessToken) {\n        const apiUrl = 'https://indexing.googleapis.com/v3/urlNotifications:publish';\n        const response = await fetch(apiUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${accessToken}`\n            },\n            body: JSON.stringify({\n                url: url,\n                type: 'URL_UPDATED'\n            })\n        });\n        if (!response.ok) {\n            const errorData = await response.json().catch(()=>({}));\n            const errorMessage = errorData.error?.message || `HTTP ${response.status}: ${response.statusText}`;\n            throw new Error(`Google Indexing API error: ${errorMessage}`);\n        }\n        // Log successful response for debugging\n        const responseData = await response.json();\n        console.log(`🎯 Google API response for ${url}:`, responseData);\n    }\n    /**\n   * Lock job to prevent concurrent processing\n   */ async lockJobForProcessing(jobId) {\n        try {\n            const lockTime = new Date().toISOString();\n            const lockId = `processor-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_jobs').update({\n                locked_at: lockTime,\n                locked_by: lockId,\n                status: 'running'\n            }).eq('id', jobId).eq('status', 'pending').is('locked_at', null).select();\n            if (error) {\n                console.error('Error locking job:', error);\n                return false;\n            }\n            const success = data && data.length > 0;\n            if (!success) {\n                console.log(`Job ${jobId} is already locked or not in pending status`);\n            }\n            return success;\n        } catch (error) {\n            console.error('Error locking job:', error);\n            return false;\n        }\n    }\n    /**\n   * Get job details from database\n   */ async getJobDetails(jobId) {\n        try {\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_jobs').select('*').eq('id', jobId).single();\n            return error ? null : data;\n        } catch (error) {\n            console.error('Error getting job details:', error);\n            return null;\n        }\n    }\n    /**\n   * Update job status and additional fields\n   */ async updateJobStatus(jobId, status, extraFields = {}) {\n        try {\n            await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_jobs').update({\n                status,\n                updated_at: new Date().toISOString(),\n                ...extraFields\n            }).eq('id', jobId);\n        } catch (error) {\n            console.error('Error updating job status:', error);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-indexing-processor.ts\n");

/***/ }),

/***/ "(rsc)/./lib/job-monitor.ts":
/*!****************************!*\
  !*** ./lib/job-monitor.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JobMonitor: () => (/* binding */ JobMonitor),\n/* harmony export */   jobMonitor: () => (/* binding */ jobMonitor)\n/* harmony export */ });\n/* harmony import */ var node_cron__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-cron */ \"node-cron\");\n/* harmony import */ var node_cron__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_cron__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./supabase */ \"(rsc)/./lib/supabase.ts\");\n/* harmony import */ var _google_indexing_processor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./google-indexing-processor */ \"(rsc)/./lib/google-indexing-processor.ts\");\n\n\n\n/**\n * Job Monitor Service\n * \n * This service runs as a background worker that:\n * 1. Monitors for pending jobs every minute\n * 2. Automatically triggers processing for pending jobs\n * 3. Handles scheduled jobs based on their next_run_at time\n * 4. Ensures only one instance processes jobs to prevent conflicts\n */ class JobMonitor {\n    constructor(){\n        this.isRunning = false;\n        this.cronJob = null;\n        this.processor = _google_indexing_processor__WEBPACK_IMPORTED_MODULE_2__.GoogleIndexingProcessor.getInstance();\n    }\n    static getInstance() {\n        if (!JobMonitor.instance) {\n            JobMonitor.instance = new JobMonitor();\n        }\n        return JobMonitor.instance;\n    }\n    /**\n   * Start the job monitor\n   * Runs every minute to check for pending jobs\n   */ start() {\n        if (this.isRunning) {\n            console.log('Job monitor is already running');\n            return;\n        }\n        console.log('Starting job monitor...');\n        this.isRunning = true;\n        // Run every minute to check for pending jobs\n        this.cronJob = node_cron__WEBPACK_IMPORTED_MODULE_0__.schedule('* * * * *', async ()=>{\n            await this.checkAndProcessJobs();\n        }, {\n            timezone: 'UTC'\n        });\n        console.log('Job monitor started - checking for jobs every minute');\n    }\n    /**\n   * Stop the job monitor\n   */ stop() {\n        if (!this.isRunning) {\n            console.log('Job monitor is not running');\n            return;\n        }\n        console.log('Stopping job monitor...');\n        this.isRunning = false;\n        if (this.cronJob) {\n            this.cronJob.destroy();\n            this.cronJob = null;\n        }\n        console.log('Job monitor stopped');\n    }\n    /**\n   * Check for pending jobs and process them\n   */ async checkAndProcessJobs() {\n        try {\n            // Find pending jobs that are ready to run\n            const { data: pendingJobs, error } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from('indb_indexing_jobs').select('id, name, user_id, next_run_at, schedule_type').eq('status', 'pending').is('locked_at', null).or('next_run_at.is.null,next_run_at.lte.' + new Date().toISOString()).limit(5); // Process max 5 jobs per minute to prevent overload\n            if (error) {\n                console.error('Error fetching pending jobs:', error);\n                return;\n            }\n            if (!pendingJobs || pendingJobs.length === 0) {\n                // No pending jobs found - this is normal\n                return;\n            }\n            console.log(`Found ${pendingJobs.length} pending jobs to process`);\n            // Process each job\n            for (const job of pendingJobs){\n                try {\n                    console.log(`Processing job ${job.id} (${job.name})`);\n                    const result = await this.processor.processIndexingJob(job.id);\n                    if (result.success) {\n                        console.log(`✅ Job ${job.id} completed successfully`);\n                        // Update next run time for recurring jobs\n                        if (job.schedule_type && job.schedule_type !== 'one-time') {\n                            await this.scheduleNextRun(job.id, job.schedule_type);\n                        }\n                    } else {\n                        console.log(`❌ Job ${job.id} failed: ${result.error}`);\n                    }\n                } catch (error) {\n                    console.error(`Error processing job ${job.id}:`, error);\n                }\n            }\n        } catch (error) {\n            console.error('Error in job monitor:', error);\n        }\n    }\n    /**\n   * Schedule the next run for recurring jobs\n   */ async scheduleNextRun(jobId, scheduleType) {\n        try {\n            const now = new Date();\n            let nextRun;\n            switch(scheduleType){\n                case 'hourly':\n                    nextRun = new Date(now.getTime() + 60 * 60 * 1000); // +1 hour\n                    break;\n                case 'daily':\n                    nextRun = new Date(now.getTime() + 24 * 60 * 60 * 1000); // +1 day\n                    break;\n                case 'weekly':\n                    nextRun = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000); // +1 week\n                    break;\n                case 'monthly':\n                    nextRun = new Date(now);\n                    nextRun.setMonth(nextRun.getMonth() + 1); // +1 month\n                    break;\n                default:\n                    return; // one-time jobs don't get rescheduled\n            }\n            await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from('indb_indexing_jobs').update({\n                status: 'pending',\n                next_run_at: nextRun.toISOString(),\n                updated_at: new Date().toISOString()\n            }).eq('id', jobId);\n            console.log(`📅 Job ${jobId} scheduled for next run at ${nextRun.toISOString()}`);\n        } catch (error) {\n            console.error(`Error scheduling next run for job ${jobId}:`, error);\n        }\n    }\n    /**\n   * Get monitor status\n   */ getStatus() {\n        return {\n            isRunning: this.isRunning,\n            nextCheck: this.cronJob ? 'Every minute' : undefined\n        };\n    }\n    /**\n   * Manually trigger job processing (for testing)\n   */ async triggerNow() {\n        console.log('Manually triggering job processing...');\n        await this.checkAndProcessJobs();\n    }\n}\n// Export singleton instance\nconst jobMonitor = JobMonitor.getInstance();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/job-monitor.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   supabaseAdmin: () => (/* binding */ supabaseAdmin)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://base.indexnow.studio\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIiwiaWF0IjoxNzUzMDMwODAwLCJleHAiOjE5MTA3OTcyMDB9.druA2hNMG5tlToENwA6diLetpMm9GdJgaSRwi75iTW0\";\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n    auth: {\n        autoRefreshToken: true,\n        persistSession: true,\n        detectSessionInUrl: true\n    }\n});\n// Server-side client with service role key (for admin operations)\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\nconst supabaseAdmin = supabaseServiceKey ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceKey, {\n    auth: {\n        autoRefreshToken: false,\n        persistSession: false\n    }\n}) : (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey) // Fallback to anon key\n;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (supabase);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc3VwYWJhc2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFvRDtBQUVwRCxNQUFNQyxjQUFjQyw4QkFBb0M7QUFDeEQsTUFBTUcsa0JBQWtCSCwyS0FBeUM7QUFFMUQsTUFBTUssV0FBV1AsbUVBQVlBLENBQUNDLGFBQWFJLGlCQUFpQjtJQUNqRUcsTUFBTTtRQUNKQyxrQkFBa0I7UUFDbEJDLGdCQUFnQjtRQUNoQkMsb0JBQW9CO0lBQ3RCO0FBQ0YsR0FBRTtBQUVGLGtFQUFrRTtBQUNsRSxNQUFNQyxxQkFBcUJWLFFBQVFDLEdBQUcsQ0FBQ1UseUJBQXlCO0FBQ3pELE1BQU1DLGdCQUFnQkYscUJBQ3pCWixtRUFBWUEsQ0FBQ0MsYUFBYVcsb0JBQW9CO0lBQzVDSixNQUFNO1FBQ0pDLGtCQUFrQjtRQUNsQkMsZ0JBQWdCO0lBQ2xCO0FBQ0YsS0FDQVYsbUVBQVlBLENBQUNDLGFBQWFJLGlCQUFpQix1QkFBdUI7Q0FBeEI7QUFFOUMsaUVBQWVFLFFBQVFBLEVBQUEiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvbGliL3N1cGFiYXNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcydcblxuY29uc3Qgc3VwYWJhc2VVcmwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwhXG5jb25zdCBzdXBhYmFzZUFub25LZXkgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSFcblxuZXhwb3J0IGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlQ2xpZW50KHN1cGFiYXNlVXJsLCBzdXBhYmFzZUFub25LZXksIHtcbiAgYXV0aDoge1xuICAgIGF1dG9SZWZyZXNoVG9rZW46IHRydWUsXG4gICAgcGVyc2lzdFNlc3Npb246IHRydWUsXG4gICAgZGV0ZWN0U2Vzc2lvbkluVXJsOiB0cnVlXG4gIH1cbn0pXG5cbi8vIFNlcnZlci1zaWRlIGNsaWVudCB3aXRoIHNlcnZpY2Ugcm9sZSBrZXkgKGZvciBhZG1pbiBvcGVyYXRpb25zKVxuY29uc3Qgc3VwYWJhc2VTZXJ2aWNlS2V5ID0gcHJvY2Vzcy5lbnYuU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWVxuZXhwb3J0IGNvbnN0IHN1cGFiYXNlQWRtaW4gPSBzdXBhYmFzZVNlcnZpY2VLZXlcbiAgPyBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlU2VydmljZUtleSwge1xuICAgICAgYXV0aDoge1xuICAgICAgICBhdXRvUmVmcmVzaFRva2VuOiBmYWxzZSxcbiAgICAgICAgcGVyc2lzdFNlc3Npb246IGZhbHNlXG4gICAgICB9XG4gICAgfSlcbiAgOiBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlQW5vbktleSkgLy8gRmFsbGJhY2sgdG8gYW5vbiBrZXlcblxuZXhwb3J0IGRlZmF1bHQgc3VwYWJhc2UiXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50Iiwic3VwYWJhc2VVcmwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwic3VwYWJhc2VBbm9uS2V5IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkiLCJzdXBhYmFzZSIsImF1dGgiLCJhdXRvUmVmcmVzaFRva2VuIiwicGVyc2lzdFNlc3Npb24iLCJkZXRlY3RTZXNzaW9uSW5VcmwiLCJzdXBhYmFzZVNlcnZpY2VLZXkiLCJTVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZIiwic3VwYWJhc2VBZG1pbiJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase.ts\n");

/***/ }),

/***/ "(rsc)/./lib/worker-startup.ts":
/*!*******************************!*\
  !*** ./lib/worker-startup.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBackgroundServicesStatus: () => (/* binding */ getBackgroundServicesStatus),\n/* harmony export */   startBackgroundServices: () => (/* binding */ startBackgroundServices),\n/* harmony export */   stopBackgroundServices: () => (/* binding */ stopBackgroundServices)\n/* harmony export */ });\n/* harmony import */ var _background_worker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./background-worker */ \"(rsc)/./lib/background-worker.ts\");\n\n/**\n * Worker Startup Module\n * \n * Initializes background services when the application starts.\n * This should be imported and called once during app initialization.\n */ let isStarted = false;\nfunction startBackgroundServices() {\n    if (isStarted) {\n        console.log('Background services already started');\n        return;\n    }\n    console.log('🚀 Initializing IndexNow Pro background services...');\n    try {\n        // Start the background worker\n        _background_worker__WEBPACK_IMPORTED_MODULE_0__.backgroundWorker.start();\n        isStarted = true;\n        console.log('✅ Background services started successfully');\n    } catch (error) {\n        console.error('❌ Failed to start background services:', error);\n    }\n}\nfunction stopBackgroundServices() {\n    if (!isStarted) {\n        console.log('Background services are not running');\n        return;\n    }\n    console.log('🛑 Stopping IndexNow Pro background services...');\n    try {\n        _background_worker__WEBPACK_IMPORTED_MODULE_0__.backgroundWorker.stop();\n        isStarted = false;\n        console.log('✅ Background services stopped successfully');\n    } catch (error) {\n        console.error('❌ Failed to stop background services:', error);\n    }\n}\nfunction getBackgroundServicesStatus() {\n    return {\n        isStarted,\n        worker: _background_worker__WEBPACK_IMPORTED_MODULE_0__.backgroundWorker.getStatus()\n    };\n}\n// Auto-start in production or development\nif (true) {\n    // Use process.nextTick to ensure modules are loaded and avoid multiple instances\n    process.nextTick(()=>{\n        if (!global.backgroundServicesStarted) {\n            global.backgroundServicesStarted = true;\n            startBackgroundServices();\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvd29ya2VyLXN0YXJ0dXAudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1RDtBQUV2RDs7Ozs7Q0FLQyxHQUVELElBQUlDLFlBQVk7QUFFVCxTQUFTQztJQUNkLElBQUlELFdBQVc7UUFDYkUsUUFBUUMsR0FBRyxDQUFDO1FBQ1o7SUFDRjtJQUVBRCxRQUFRQyxHQUFHLENBQUM7SUFFWixJQUFJO1FBQ0YsOEJBQThCO1FBQzlCSixnRUFBZ0JBLENBQUNLLEtBQUs7UUFDdEJKLFlBQVk7UUFFWkUsUUFBUUMsR0FBRyxDQUFDO0lBQ2QsRUFBRSxPQUFPRSxPQUFPO1FBQ2RILFFBQVFHLEtBQUssQ0FBQywwQ0FBMENBO0lBQzFEO0FBQ0Y7QUFFTyxTQUFTQztJQUNkLElBQUksQ0FBQ04sV0FBVztRQUNkRSxRQUFRQyxHQUFHLENBQUM7UUFDWjtJQUNGO0lBRUFELFFBQVFDLEdBQUcsQ0FBQztJQUVaLElBQUk7UUFDRkosZ0VBQWdCQSxDQUFDUSxJQUFJO1FBQ3JCUCxZQUFZO1FBRVpFLFFBQVFDLEdBQUcsQ0FBQztJQUNkLEVBQUUsT0FBT0UsT0FBTztRQUNkSCxRQUFRRyxLQUFLLENBQUMseUNBQXlDQTtJQUN6RDtBQUNGO0FBRU8sU0FBU0c7SUFDZCxPQUFPO1FBQ0xSO1FBQ0FTLFFBQVFWLGdFQUFnQkEsQ0FBQ1csU0FBUztJQUNwQztBQUNGO0FBRUEsMENBQTBDO0FBQzFDLElBQUksSUFBNkIsRUFBRTtJQUNqQyxpRkFBaUY7SUFDakZDLFFBQVFDLFFBQVEsQ0FBQztRQUNmLElBQUksQ0FBQyxPQUFnQkUseUJBQXlCLEVBQUU7WUFDN0NELE9BQWVDLHlCQUF5QixHQUFHO1lBQzVDYjtRQUNGO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9saWIvd29ya2VyLXN0YXJ0dXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmFja2dyb3VuZFdvcmtlciB9IGZyb20gJy4vYmFja2dyb3VuZC13b3JrZXInO1xuXG4vKipcbiAqIFdvcmtlciBTdGFydHVwIE1vZHVsZVxuICogXG4gKiBJbml0aWFsaXplcyBiYWNrZ3JvdW5kIHNlcnZpY2VzIHdoZW4gdGhlIGFwcGxpY2F0aW9uIHN0YXJ0cy5cbiAqIFRoaXMgc2hvdWxkIGJlIGltcG9ydGVkIGFuZCBjYWxsZWQgb25jZSBkdXJpbmcgYXBwIGluaXRpYWxpemF0aW9uLlxuICovXG5cbmxldCBpc1N0YXJ0ZWQgPSBmYWxzZTtcblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0QmFja2dyb3VuZFNlcnZpY2VzKCk6IHZvaWQge1xuICBpZiAoaXNTdGFydGVkKSB7XG4gICAgY29uc29sZS5sb2coJ0JhY2tncm91bmQgc2VydmljZXMgYWxyZWFkeSBzdGFydGVkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc29sZS5sb2coJ/CfmoAgSW5pdGlhbGl6aW5nIEluZGV4Tm93IFBybyBiYWNrZ3JvdW5kIHNlcnZpY2VzLi4uJyk7XG4gIFxuICB0cnkge1xuICAgIC8vIFN0YXJ0IHRoZSBiYWNrZ3JvdW5kIHdvcmtlclxuICAgIGJhY2tncm91bmRXb3JrZXIuc3RhcnQoKTtcbiAgICBpc1N0YXJ0ZWQgPSB0cnVlO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCfinIUgQmFja2dyb3VuZCBzZXJ2aWNlcyBzdGFydGVkIHN1Y2Nlc3NmdWxseScpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBGYWlsZWQgdG8gc3RhcnQgYmFja2dyb3VuZCBzZXJ2aWNlczonLCBlcnJvcik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0b3BCYWNrZ3JvdW5kU2VydmljZXMoKTogdm9pZCB7XG4gIGlmICghaXNTdGFydGVkKSB7XG4gICAgY29uc29sZS5sb2coJ0JhY2tncm91bmQgc2VydmljZXMgYXJlIG5vdCBydW5uaW5nJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc29sZS5sb2coJ/Cfm5EgU3RvcHBpbmcgSW5kZXhOb3cgUHJvIGJhY2tncm91bmQgc2VydmljZXMuLi4nKTtcbiAgXG4gIHRyeSB7XG4gICAgYmFja2dyb3VuZFdvcmtlci5zdG9wKCk7XG4gICAgaXNTdGFydGVkID0gZmFsc2U7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ+KchSBCYWNrZ3JvdW5kIHNlcnZpY2VzIHN0b3BwZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byBzdG9wIGJhY2tncm91bmQgc2VydmljZXM6JywgZXJyb3IpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCYWNrZ3JvdW5kU2VydmljZXNTdGF0dXMoKTogYW55IHtcbiAgcmV0dXJuIHtcbiAgICBpc1N0YXJ0ZWQsXG4gICAgd29ya2VyOiBiYWNrZ3JvdW5kV29ya2VyLmdldFN0YXR1cygpXG4gIH07XG59XG5cbi8vIEF1dG8tc3RhcnQgaW4gcHJvZHVjdGlvbiBvciBkZXZlbG9wbWVudFxuaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7IC8vIFNlcnZlci1zaWRlIG9ubHlcbiAgLy8gVXNlIHByb2Nlc3MubmV4dFRpY2sgdG8gZW5zdXJlIG1vZHVsZXMgYXJlIGxvYWRlZCBhbmQgYXZvaWQgbXVsdGlwbGUgaW5zdGFuY2VzXG4gIHByb2Nlc3MubmV4dFRpY2soKCkgPT4ge1xuICAgIGlmICghKGdsb2JhbCBhcyBhbnkpLmJhY2tncm91bmRTZXJ2aWNlc1N0YXJ0ZWQpIHtcbiAgICAgIChnbG9iYWwgYXMgYW55KS5iYWNrZ3JvdW5kU2VydmljZXNTdGFydGVkID0gdHJ1ZTtcbiAgICAgIHN0YXJ0QmFja2dyb3VuZFNlcnZpY2VzKCk7XG4gICAgfVxuICB9KTtcbn0iXSwibmFtZXMiOlsiYmFja2dyb3VuZFdvcmtlciIsImlzU3RhcnRlZCIsInN0YXJ0QmFja2dyb3VuZFNlcnZpY2VzIiwiY29uc29sZSIsImxvZyIsInN0YXJ0IiwiZXJyb3IiLCJzdG9wQmFja2dyb3VuZFNlcnZpY2VzIiwic3RvcCIsImdldEJhY2tncm91bmRTZXJ2aWNlc1N0YXR1cyIsIndvcmtlciIsImdldFN0YXR1cyIsInByb2Nlc3MiLCJuZXh0VGljayIsImdsb2JhbCIsImJhY2tncm91bmRTZXJ2aWNlc1N0YXJ0ZWQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/worker-startup.ts\n");

/***/ })

};
;