"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_lib_worker-startup_ts";
exports.ids = ["_rsc_lib_worker-startup_ts"];
exports.modules = {

/***/ "(rsc)/./lib/background-worker.ts":
/*!**********************************!*\
  !*** ./lib/background-worker.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BackgroundWorker: () => (/* binding */ BackgroundWorker),\n/* harmony export */   backgroundWorker: () => (/* binding */ backgroundWorker)\n/* harmony export */ });\n/* harmony import */ var _job_monitor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./job-monitor */ \"(rsc)/./lib/job-monitor.ts\");\n\n/**\n * Background Worker Service\n * \n * Manages all background services for the IndexNow Pro application:\n * - Job monitoring and processing\n * - Cleanup tasks\n * - Health checks\n */ class BackgroundWorker {\n    static getInstance() {\n        if (!BackgroundWorker.instance) {\n            BackgroundWorker.instance = new BackgroundWorker();\n        }\n        return BackgroundWorker.instance;\n    }\n    /**\n   * Start all background services\n   */ start() {\n        if (this.isStarted) {\n            console.log('Background worker is already started');\n            return;\n        }\n        console.log('🚀 Starting IndexNow Pro background worker...');\n        try {\n            // Start job monitor\n            _job_monitor__WEBPACK_IMPORTED_MODULE_0__.jobMonitor.start();\n            this.isStarted = true;\n            console.log('✅ Background worker started successfully');\n            // Log status every 5 minutes\n            setInterval(()=>{\n                this.logStatus();\n            }, 5 * 60 * 1000);\n        } catch (error) {\n            console.error('❌ Failed to start background worker:', error);\n        }\n    }\n    /**\n   * Stop all background services\n   */ stop() {\n        if (!this.isStarted) {\n            console.log('Background worker is not running');\n            return;\n        }\n        console.log('🛑 Stopping background worker...');\n        try {\n            // Stop job monitor\n            _job_monitor__WEBPACK_IMPORTED_MODULE_0__.jobMonitor.stop();\n            this.isStarted = false;\n            console.log('✅ Background worker stopped successfully');\n        } catch (error) {\n            console.error('❌ Error stopping background worker:', error);\n        }\n    }\n    /**\n   * Get worker status\n   */ getStatus() {\n        return {\n            isStarted: this.isStarted,\n            jobMonitor: _job_monitor__WEBPACK_IMPORTED_MODULE_0__.jobMonitor.getStatus(),\n            uptime: this.isStarted ? process.uptime() : undefined\n        };\n    }\n    /**\n   * Log current status\n   */ logStatus() {\n        const status = this.getStatus();\n        console.log('📊 Background Worker Status:', {\n            isStarted: status.isStarted,\n            jobMonitor: status.jobMonitor.isRunning,\n            uptime: status.uptime ? `${Math.round(status.uptime / 60)} minutes` : 'N/A'\n        });\n    }\n    constructor(){\n        this.isStarted = false;\n    }\n}\n// Export singleton instance\nconst backgroundWorker = BackgroundWorker.getInstance();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvYmFja2dyb3VuZC13b3JrZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJDO0FBRTNDOzs7Ozs7O0NBT0MsR0FDTSxNQUFNQztJQUlYLE9BQU9DLGNBQWdDO1FBQ3JDLElBQUksQ0FBQ0QsaUJBQWlCRSxRQUFRLEVBQUU7WUFDOUJGLGlCQUFpQkUsUUFBUSxHQUFHLElBQUlGO1FBQ2xDO1FBQ0EsT0FBT0EsaUJBQWlCRSxRQUFRO0lBQ2xDO0lBRUE7O0dBRUMsR0FDREMsUUFBYztRQUNaLElBQUksSUFBSSxDQUFDQyxTQUFTLEVBQUU7WUFDbEJDLFFBQVFDLEdBQUcsQ0FBQztZQUNaO1FBQ0Y7UUFFQUQsUUFBUUMsR0FBRyxDQUFDO1FBRVosSUFBSTtZQUNGLG9CQUFvQjtZQUNwQlAsb0RBQVVBLENBQUNJLEtBQUs7WUFFaEIsSUFBSSxDQUFDQyxTQUFTLEdBQUc7WUFDakJDLFFBQVFDLEdBQUcsQ0FBQztZQUVaLDZCQUE2QjtZQUM3QkMsWUFBWTtnQkFDVixJQUFJLENBQUNDLFNBQVM7WUFDaEIsR0FBRyxJQUFJLEtBQUs7UUFFZCxFQUFFLE9BQU9DLE9BQU87WUFDZEosUUFBUUksS0FBSyxDQUFDLHdDQUF3Q0E7UUFDeEQ7SUFDRjtJQUVBOztHQUVDLEdBQ0RDLE9BQWE7UUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDTixTQUFTLEVBQUU7WUFDbkJDLFFBQVFDLEdBQUcsQ0FBQztZQUNaO1FBQ0Y7UUFFQUQsUUFBUUMsR0FBRyxDQUFDO1FBRVosSUFBSTtZQUNGLG1CQUFtQjtZQUNuQlAsb0RBQVVBLENBQUNXLElBQUk7WUFFZixJQUFJLENBQUNOLFNBQVMsR0FBRztZQUNqQkMsUUFBUUMsR0FBRyxDQUFDO1FBQ2QsRUFBRSxPQUFPRyxPQUFPO1lBQ2RKLFFBQVFJLEtBQUssQ0FBQyx1Q0FBdUNBO1FBQ3ZEO0lBQ0Y7SUFFQTs7R0FFQyxHQUNERSxZQUlFO1FBQ0EsT0FBTztZQUNMUCxXQUFXLElBQUksQ0FBQ0EsU0FBUztZQUN6QkwsWUFBWUEsb0RBQVVBLENBQUNZLFNBQVM7WUFDaENDLFFBQVEsSUFBSSxDQUFDUixTQUFTLEdBQUdTLFFBQVFELE1BQU0sS0FBS0U7UUFDOUM7SUFDRjtJQUVBOztHQUVDLEdBQ0QsWUFBMEI7UUFDeEIsTUFBTUMsU0FBUyxJQUFJLENBQUNKLFNBQVM7UUFDN0JOLFFBQVFDLEdBQUcsQ0FBQyxnQ0FBZ0M7WUFDMUNGLFdBQVdXLE9BQU9YLFNBQVM7WUFDM0JMLFlBQVlnQixPQUFPaEIsVUFBVSxDQUFDaUIsU0FBUztZQUN2Q0osUUFBUUcsT0FBT0gsTUFBTSxHQUFHLEdBQUdLLEtBQUtDLEtBQUssQ0FBQ0gsT0FBT0gsTUFBTSxHQUFHLElBQUksUUFBUSxDQUFDLEdBQUc7UUFDeEU7SUFDRjs7YUFwRlFSLFlBQVk7O0FBcUZ0QjtBQUVBLDRCQUE0QjtBQUNyQixNQUFNZSxtQkFBbUJuQixpQkFBaUJDLFdBQVcsR0FBRyIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9saWIvYmFja2dyb3VuZC13b3JrZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgam9iTW9uaXRvciB9IGZyb20gJy4vam9iLW1vbml0b3InO1xuXG4vKipcbiAqIEJhY2tncm91bmQgV29ya2VyIFNlcnZpY2VcbiAqIFxuICogTWFuYWdlcyBhbGwgYmFja2dyb3VuZCBzZXJ2aWNlcyBmb3IgdGhlIEluZGV4Tm93IFBybyBhcHBsaWNhdGlvbjpcbiAqIC0gSm9iIG1vbml0b3JpbmcgYW5kIHByb2Nlc3NpbmdcbiAqIC0gQ2xlYW51cCB0YXNrc1xuICogLSBIZWFsdGggY2hlY2tzXG4gKi9cbmV4cG9ydCBjbGFzcyBCYWNrZ3JvdW5kV29ya2VyIHtcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEJhY2tncm91bmRXb3JrZXI7XG4gIHByaXZhdGUgaXNTdGFydGVkID0gZmFsc2U7XG5cbiAgc3RhdGljIGdldEluc3RhbmNlKCk6IEJhY2tncm91bmRXb3JrZXIge1xuICAgIGlmICghQmFja2dyb3VuZFdvcmtlci5pbnN0YW5jZSkge1xuICAgICAgQmFja2dyb3VuZFdvcmtlci5pbnN0YW5jZSA9IG5ldyBCYWNrZ3JvdW5kV29ya2VyKCk7XG4gICAgfVxuICAgIHJldHVybiBCYWNrZ3JvdW5kV29ya2VyLmluc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGFsbCBiYWNrZ3JvdW5kIHNlcnZpY2VzXG4gICAqL1xuICBzdGFydCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc1N0YXJ0ZWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kIHdvcmtlciBpcyBhbHJlYWR5IHN0YXJ0ZWQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygn8J+agCBTdGFydGluZyBJbmRleE5vdyBQcm8gYmFja2dyb3VuZCB3b3JrZXIuLi4nKTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgLy8gU3RhcnQgam9iIG1vbml0b3JcbiAgICAgIGpvYk1vbml0b3Iuc3RhcnQoKTtcbiAgICAgIFxuICAgICAgdGhpcy5pc1N0YXJ0ZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS5sb2coJ+KchSBCYWNrZ3JvdW5kIHdvcmtlciBzdGFydGVkIHN1Y2Nlc3NmdWxseScpO1xuICAgICAgXG4gICAgICAvLyBMb2cgc3RhdHVzIGV2ZXJ5IDUgbWludXRlc1xuICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICB0aGlzLmxvZ1N0YXR1cygpO1xuICAgICAgfSwgNSAqIDYwICogMTAwMCk7XG4gICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byBzdGFydCBiYWNrZ3JvdW5kIHdvcmtlcjonLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0b3AgYWxsIGJhY2tncm91bmQgc2VydmljZXNcbiAgICovXG4gIHN0b3AoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlzU3RhcnRlZCkge1xuICAgICAgY29uc29sZS5sb2coJ0JhY2tncm91bmQgd29ya2VyIGlzIG5vdCBydW5uaW5nJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coJ/Cfm5EgU3RvcHBpbmcgYmFja2dyb3VuZCB3b3JrZXIuLi4nKTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgLy8gU3RvcCBqb2IgbW9uaXRvclxuICAgICAgam9iTW9uaXRvci5zdG9wKCk7XG4gICAgICBcbiAgICAgIHRoaXMuaXNTdGFydGVkID0gZmFsc2U7XG4gICAgICBjb25zb2xlLmxvZygn4pyFIEJhY2tncm91bmQgd29ya2VyIHN0b3BwZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBzdG9wcGluZyBiYWNrZ3JvdW5kIHdvcmtlcjonLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB3b3JrZXIgc3RhdHVzXG4gICAqL1xuICBnZXRTdGF0dXMoKToge1xuICAgIGlzU3RhcnRlZDogYm9vbGVhbjtcbiAgICBqb2JNb25pdG9yOiBhbnk7XG4gICAgdXB0aW1lPzogbnVtYmVyO1xuICB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNTdGFydGVkOiB0aGlzLmlzU3RhcnRlZCxcbiAgICAgIGpvYk1vbml0b3I6IGpvYk1vbml0b3IuZ2V0U3RhdHVzKCksXG4gICAgICB1cHRpbWU6IHRoaXMuaXNTdGFydGVkID8gcHJvY2Vzcy51cHRpbWUoKSA6IHVuZGVmaW5lZFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogTG9nIGN1cnJlbnQgc3RhdHVzXG4gICAqL1xuICBwcml2YXRlIGxvZ1N0YXR1cygpOiB2b2lkIHtcbiAgICBjb25zdCBzdGF0dXMgPSB0aGlzLmdldFN0YXR1cygpO1xuICAgIGNvbnNvbGUubG9nKCfwn5OKIEJhY2tncm91bmQgV29ya2VyIFN0YXR1czonLCB7XG4gICAgICBpc1N0YXJ0ZWQ6IHN0YXR1cy5pc1N0YXJ0ZWQsXG4gICAgICBqb2JNb25pdG9yOiBzdGF0dXMuam9iTW9uaXRvci5pc1J1bm5pbmcsXG4gICAgICB1cHRpbWU6IHN0YXR1cy51cHRpbWUgPyBgJHtNYXRoLnJvdW5kKHN0YXR1cy51cHRpbWUgLyA2MCl9IG1pbnV0ZXNgIDogJ04vQSdcbiAgICB9KTtcbiAgfVxufVxuXG4vLyBFeHBvcnQgc2luZ2xldG9uIGluc3RhbmNlXG5leHBvcnQgY29uc3QgYmFja2dyb3VuZFdvcmtlciA9IEJhY2tncm91bmRXb3JrZXIuZ2V0SW5zdGFuY2UoKTsiXSwibmFtZXMiOlsiam9iTW9uaXRvciIsIkJhY2tncm91bmRXb3JrZXIiLCJnZXRJbnN0YW5jZSIsImluc3RhbmNlIiwic3RhcnQiLCJpc1N0YXJ0ZWQiLCJjb25zb2xlIiwibG9nIiwic2V0SW50ZXJ2YWwiLCJsb2dTdGF0dXMiLCJlcnJvciIsInN0b3AiLCJnZXRTdGF0dXMiLCJ1cHRpbWUiLCJwcm9jZXNzIiwidW5kZWZpbmVkIiwic3RhdHVzIiwiaXNSdW5uaW5nIiwiTWF0aCIsInJvdW5kIiwiYmFja2dyb3VuZFdvcmtlciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/background-worker.ts\n");

/***/ }),

/***/ "(rsc)/./lib/encryption.ts":
/*!***************************!*\
  !*** ./lib/encryption.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EncryptionService: () => (/* binding */ EncryptionService)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n * Simple encryption utility for securing sensitive data\n * Uses AES-256-CBC with proper IV handling\n */ class EncryptionService {\n    static{\n        this.ALGORITHM = 'aes-256-cbc';\n    }\n    static{\n        this.IV_LENGTH = 16;\n    }\n    static getEncryptionKey() {\n        const key = process.env.ENCRYPTION_KEY;\n        if (!key) {\n            throw new Error('ENCRYPTION_KEY environment variable is required');\n        }\n        if (key.length !== 32) {\n            throw new Error('ENCRYPTION_KEY must be exactly 32 characters long');\n        }\n        return Buffer.from(key, 'utf8');\n    }\n    /**\n   * Encrypt sensitive data\n   * Format: IV:EncryptedData\n   */ static encrypt(text) {\n        try {\n            const key = this.getEncryptionKey();\n            const iv = crypto__WEBPACK_IMPORTED_MODULE_0___default().randomBytes(this.IV_LENGTH);\n            const cipher = crypto__WEBPACK_IMPORTED_MODULE_0___default().createCipheriv(this.ALGORITHM, key, iv);\n            let encrypted = cipher.update(text, 'utf8', 'hex');\n            encrypted += cipher.final('hex');\n            return iv.toString('hex') + ':' + encrypted;\n        } catch (error) {\n            console.error('Encryption error:', error);\n            throw new Error('Failed to encrypt data');\n        }\n    }\n    /**\n   * Decrypt sensitive data\n   * Expects format: IV:EncryptedData\n   */ static decrypt(encryptedText) {\n        try {\n            console.log('🔓 DEBUG - Starting decryption process...');\n            console.log('- Input encrypted text length:', encryptedText.length);\n            console.log('- Input preview:', encryptedText.substring(0, 100) + '...');\n            const key = this.getEncryptionKey();\n            console.log('- Encryption key length:', key.length);\n            console.log('- Encryption key preview:', key.toString('hex').substring(0, 16) + '...');\n            const parts = encryptedText.split(':');\n            console.log('- Split parts count:', parts.length);\n            if (parts.length !== 2) {\n                console.error('❌ DEBUG - Invalid format, expected IV:EncryptedData but got', parts.length, 'parts');\n                throw new Error('Invalid encrypted data format - expected IV:EncryptedData');\n            }\n            console.log('- IV part (hex):', parts[0]);\n            console.log('- Encrypted data part length:', parts[1].length);\n            console.log('- Encrypted data preview:', parts[1].substring(0, 50) + '...');\n            const iv = Buffer.from(parts[0], 'hex');\n            console.log('- IV buffer length:', iv.length);\n            console.log('- IV buffer:', iv.toString('hex'));\n            const encryptedData = parts[1];\n            console.log('- Creating decipher with algorithm:', this.ALGORITHM);\n            const decipher = crypto__WEBPACK_IMPORTED_MODULE_0___default().createDecipheriv(this.ALGORITHM, key, iv);\n            console.log('- Updating decipher...');\n            let decrypted = decipher.update(encryptedData, 'hex', 'utf8');\n            console.log('- First update result length:', decrypted.length);\n            console.log('- Finalizing decipher...');\n            decrypted += decipher.final('utf8');\n            console.log('- Final decrypted length:', decrypted.length);\n            console.log('- Decrypted preview:', decrypted.substring(0, 100) + '...');\n            return decrypted;\n        } catch (error) {\n            console.error('❌ Decryption error details:', error);\n            console.error('- Error name:', error instanceof Error ? error.name : 'Unknown');\n            console.error('- Error message:', error instanceof Error ? error.message : String(error));\n            console.error('- Error stack:', error instanceof Error ? error.stack : 'No stack');\n            throw new Error('Failed to decrypt data');\n        }\n    }\n    /**\n   * Test if encrypted data can be decrypted with current key\n   */ static testDecryption(encryptedText) {\n        try {\n            this.decrypt(encryptedText);\n            return true;\n        } catch (error) {\n            return false;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/encryption.ts\n");

/***/ }),

/***/ "(rsc)/./lib/google-auth-service.ts":
/*!************************************!*\
  !*** ./lib/google-auth-service.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleAuthService: () => (/* binding */ GoogleAuthService)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(rsc)/./lib/supabase.ts\");\n/* harmony import */ var _encryption__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encryption */ \"(rsc)/./lib/encryption.ts\");\n/* harmony import */ var google_auth_library__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\n\n\n\n/**\n * Google Authentication Service\n * \n * Handles the complete Google API authentication workflow:\n * 1. Decrypt service account credentials from database\n * 2. Generate JWT tokens using service account private key\n * 3. Exchange JWT for access tokens with Google's token endpoint\n * 4. Cache encrypted access tokens in database with expiration\n * 5. Manage token refresh and quota tracking\n */ class GoogleAuthService {\n    static{\n        this.INDEXING_SCOPE = 'https://www.googleapis.com/auth/indexing';\n    }\n    static{\n        this.TOKEN_EXPIRY_BUFFER = 5 * 60 * 1000; // 5 minutes buffer\n    }\n    static getInstance() {\n        if (!GoogleAuthService.instance) {\n            GoogleAuthService.instance = new GoogleAuthService();\n        }\n        return GoogleAuthService.instance;\n    }\n    /**\n   * Get a valid access token for Google API calls\n   * First checks cached token in database, then generates new one if needed\n   */ async getAccessToken(serviceAccountId) {\n        try {\n            console.log(`🔑 Getting access token for service account: ${serviceAccountId}`);\n            // Get service account from database\n            const { data: serviceAccount, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_google_service_accounts').select('*').eq('id', serviceAccountId).single();\n            if (error || !serviceAccount) {\n                console.error('Service account not found:', error);\n                return null;\n            }\n            // DEBUG: Log encrypted data info\n            console.log('🔍 DEBUG - Service Account Data:');\n            console.log('- ID:', serviceAccount.id);\n            console.log('- Name:', serviceAccount.name);\n            console.log('- Email:', serviceAccount.email);\n            console.log('- Is Active:', serviceAccount.is_active);\n            console.log('- Encrypted Credentials Length:', serviceAccount.encrypted_credentials?.length || 0);\n            console.log('- Encrypted Credentials Preview:', serviceAccount.encrypted_credentials?.substring(0, 100) + '...');\n            console.log('- Current ENCRYPTION_KEY:', process.env.ENCRYPTION_KEY?.substring(0, 8) + '...');\n            // Check format\n            const parts = serviceAccount.encrypted_credentials?.split(':');\n            console.log('- Encrypted Format Parts:', parts?.length || 0);\n            if (parts && parts.length === 2) {\n                console.log('- IV Length (hex):', parts[0].length);\n                console.log('- Encrypted Data Length (hex):', parts[1].length);\n                console.log('- IV (first 16 chars):', parts[0].substring(0, 16));\n                console.log('- Encrypted Data (first 32 chars):', parts[1].substring(0, 32));\n            }\n            // Check if we have a valid cached token\n            const cachedToken = await this.getCachedAccessToken(serviceAccount);\n            if (cachedToken) {\n                console.log('✅ Using cached access token');\n                return cachedToken;\n            }\n            // Generate new access token\n            console.log('🔄 Generating new access token');\n            const newToken = await this.generateNewAccessToken(serviceAccount);\n            if (newToken) {\n                // Cache the new token in database\n                await this.cacheAccessToken(serviceAccountId, newToken);\n                console.log('✅ New access token generated and cached');\n                return newToken.access_token;\n            }\n            return null;\n        } catch (error) {\n            console.error('Error getting access token:', error);\n            return null;\n        }\n    }\n    /**\n   * Get available service account for a user\n   */ async getAvailableServiceAccount(userId) {\n        try {\n            const { data: accounts, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_google_service_accounts').select('*').eq('user_id', userId).eq('is_active', true).limit(1);\n            if (error || !accounts?.length) {\n                console.log('No active service accounts found for user:', userId);\n                return null;\n            }\n            return accounts[0];\n        } catch (error) {\n            console.error('Error getting service account:', error);\n            return null;\n        }\n    }\n    /**\n   * Check if we have a valid cached access token\n   */ async getCachedAccessToken(serviceAccount) {\n        try {\n            if (!serviceAccount.encrypted_access_token || !serviceAccount.access_token_expires_at) {\n                return null;\n            }\n            const expiresAt = new Date(serviceAccount.access_token_expires_at).getTime();\n            const now = Date.now();\n            // Check if token is still valid (with buffer)\n            if (expiresAt <= now + GoogleAuthService.TOKEN_EXPIRY_BUFFER) {\n                console.log('Cached token expired or expiring soon');\n                return null;\n            }\n            // Decrypt and return cached token\n            const accessToken = _encryption__WEBPACK_IMPORTED_MODULE_1__.EncryptionService.decrypt(serviceAccount.encrypted_access_token);\n            return accessToken;\n        } catch (error) {\n            console.error('Error checking cached token:', error);\n            return null;\n        }\n    }\n    /**\n   * Generate new access token using service account credentials\n   */ async generateNewAccessToken(serviceAccount) {\n        try {\n            console.log('🔄 Starting generateNewAccessToken process...');\n            // Check if credentials are empty \n            if (!serviceAccount.encrypted_credentials || serviceAccount.encrypted_credentials.trim() === '') {\n                console.log('⚠️ Service account has no encrypted credentials. Skipping...');\n                return null;\n            }\n            console.log('🔐 DEBUG - About to decrypt credentials...');\n            console.log('- Encrypted data length:', serviceAccount.encrypted_credentials.length);\n            console.log('- Encrypted data to decrypt:', serviceAccount.encrypted_credentials.substring(0, 100) + '...');\n            // Decrypt service account credentials - FORCE DECRYPTION ATTEMPT\n            let credentialsJson;\n            try {\n                console.log('🔓 FORCING DECRYPTION ATTEMPT...');\n                credentialsJson = _encryption__WEBPACK_IMPORTED_MODULE_1__.EncryptionService.decrypt(serviceAccount.encrypted_credentials);\n                console.log('✅ DEBUG - DECRYPTION SUCCESSFUL!');\n                console.log('- Decrypted JSON length:', credentialsJson.length);\n                console.log('- Decrypted JSON preview (first 500 chars):', credentialsJson.substring(0, 500));\n                console.log('- Full decrypted JSON:', credentialsJson);\n            } catch (decryptError) {\n                console.error('❌ DEBUG - DECRYPTION FAILED:', decryptError);\n                console.error('- Error type:', decryptError instanceof Error ? decryptError.name : typeof decryptError);\n                console.error('- Error message:', decryptError instanceof Error ? decryptError.message : String(decryptError));\n                console.error('- Error stack:', decryptError instanceof Error ? decryptError.stack : 'No stack');\n                // DO NOT CLEAR ANYTHING - just fail and show the error\n                throw decryptError;\n            }\n            console.log('📋 DEBUG - Parsing JSON credentials...');\n            let credentials;\n            try {\n                credentials = JSON.parse(credentialsJson);\n                console.log('✅ DEBUG - JSON parsing successful!');\n                console.log('- Service account type:', credentials.type);\n                console.log('- Project ID:', credentials.project_id);\n                console.log('- Client email:', credentials.client_email);\n                console.log('- Private key preview:', credentials.private_key?.substring(0, 50) + '...');\n            } catch (parseError) {\n                console.error('❌ DEBUG - JSON parsing failed:', parseError);\n                console.error('- Raw decrypted data:', credentialsJson);\n                throw parseError;\n            }\n            console.log('🔐 DEBUG - Creating JWT with service account credentials...');\n            console.log('- Email for JWT:', credentials.client_email);\n            console.log('- Private key starts with:', credentials.private_key?.substring(0, 30));\n            console.log('- Scopes:', [\n                GoogleAuthService.INDEXING_SCOPE\n            ]);\n            // Create JWT client\n            let jwtClient;\n            try {\n                jwtClient = new google_auth_library__WEBPACK_IMPORTED_MODULE_2__.JWT({\n                    email: credentials.client_email,\n                    key: credentials.private_key,\n                    scopes: [\n                        GoogleAuthService.INDEXING_SCOPE\n                    ]\n                });\n                console.log('✅ DEBUG - JWT client created successfully');\n            } catch (jwtError) {\n                console.error('❌ DEBUG - JWT client creation failed:', jwtError);\n                throw jwtError;\n            }\n            console.log('🌐 DEBUG - Requesting access token from Google...');\n            // Get access token\n            let tokenResponse;\n            try {\n                tokenResponse = await jwtClient.authorize();\n                console.log('✅ DEBUG - Google authorization successful!');\n                console.log('- Token type:', typeof tokenResponse.access_token);\n                console.log('- Token length:', tokenResponse.access_token?.length || 0);\n                console.log('- Token preview:', tokenResponse.access_token?.substring(0, 20) + '...');\n                console.log('- Expires in:', tokenResponse.expiry_date);\n            } catch (authError) {\n                console.error('❌ DEBUG - Google authorization failed:', authError);\n                console.error('- Error details:', authError instanceof Error ? authError.message : String(authError));\n                throw authError;\n            }\n            if (!tokenResponse.access_token) {\n                console.error('❌ DEBUG - No access token received from Google');\n                console.error('- Response:', tokenResponse);\n                throw new Error('No access token received from Google');\n            }\n            console.log('✅ Successfully obtained access token from Google');\n            return {\n                access_token: tokenResponse.access_token,\n                expires_in: 3600 // Google tokens typically expire in 1 hour\n            };\n        } catch (error) {\n            console.error('Error generating access token:', error);\n            return null;\n        }\n    }\n    /**\n   * Cache encrypted access token in database\n   */ async cacheAccessToken(serviceAccountId, tokenData) {\n        try {\n            // Encrypt access token\n            const encryptedToken = _encryption__WEBPACK_IMPORTED_MODULE_1__.EncryptionService.encrypt(tokenData.access_token);\n            // Calculate expiration time (with some buffer)\n            const expiresAt = new Date(Date.now() + tokenData.expires_in * 1000 - GoogleAuthService.TOKEN_EXPIRY_BUFFER);\n            // Update service account with cached token\n            const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_google_service_accounts').update({\n                encrypted_access_token: encryptedToken,\n                access_token_expires_at: expiresAt.toISOString(),\n                updated_at: new Date().toISOString()\n            }).eq('id', serviceAccountId);\n            if (error) {\n                console.error('Error caching access token:', error);\n            } else {\n                console.log('✅ Access token cached in database');\n            }\n        } catch (error) {\n            console.error('Error caching access token:', error);\n        }\n    }\n    /**\n   * Validate service account credentials format\n   */ static validateServiceAccountCredentials(credentialsJson) {\n        try {\n            const credentials = JSON.parse(credentialsJson);\n            const requiredFields = [\n                'type',\n                'project_id',\n                'private_key_id',\n                'private_key',\n                'client_email',\n                'client_id',\n                'auth_uri',\n                'token_uri'\n            ];\n            return requiredFields.every((field)=>credentials[field]);\n        } catch (error) {\n            return false;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-auth-service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/google-indexing-processor.ts":
/*!******************************************!*\
  !*** ./lib/google-indexing-processor.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleIndexingProcessor: () => (/* binding */ GoogleIndexingProcessor)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(rsc)/./lib/supabase.ts\");\n/* harmony import */ var _google_auth_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./google-auth-service */ \"(rsc)/./lib/google-auth-service.ts\");\n/* harmony import */ var _websocket_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./websocket-service */ \"(rsc)/./lib/websocket-service.ts\");\n/* harmony import */ var _job_logging_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./job-logging-service */ \"(rsc)/./lib/job-logging-service.ts\");\n\n\n\n\n/**\n * Google Indexing Processor\n * \n * Professional-grade URL indexing system that integrates with Google's Indexing API\n * to automatically submit URLs for indexing with proper error handling, retry logic,\n * and quota management across multiple service accounts.\n */ class GoogleIndexingProcessor {\n    constructor(){\n        this.processingJobs = new Set();\n        this.googleAuth = _google_auth_service__WEBPACK_IMPORTED_MODULE_1__.GoogleAuthService.getInstance();\n        this.websocketService = _websocket_service__WEBPACK_IMPORTED_MODULE_2__.WebSocketService.getInstance();\n        this.jobLogger = _job_logging_service__WEBPACK_IMPORTED_MODULE_3__.JobLoggingService.getInstance();\n    }\n    static getInstance() {\n        if (!GoogleIndexingProcessor.instance) {\n            GoogleIndexingProcessor.instance = new GoogleIndexingProcessor();\n        }\n        return GoogleIndexingProcessor.instance;\n    }\n    /**\n   * Process a complete indexing job\n   * Extracts URLs, creates submissions, and processes each URL through Google's API\n   */ async processIndexingJob(jobId) {\n        if (this.processingJobs.has(jobId)) {\n            return {\n                success: false,\n                error: 'Job is already being processed'\n            };\n        }\n        try {\n            // Lock the job to prevent concurrent processing\n            const lockResult = await this.lockJobForProcessing(jobId);\n            if (!lockResult) {\n                return {\n                    success: false,\n                    error: 'Failed to lock job - may already be processing'\n                };\n            }\n            this.processingJobs.add(jobId);\n            console.log(`🚀 Starting indexing job ${jobId}`);\n            // Get job details\n            const job = await this.getJobDetails(jobId);\n            if (!job) {\n                return {\n                    success: false,\n                    error: 'Job not found'\n                };\n            }\n            // Log job start\n            await this.jobLogger.logJobStarted(jobId, job.name, job.total_urls || 0);\n            // Update job status to running\n            await this.updateJobStatus(jobId, 'running', {\n                started_at: new Date().toISOString(),\n                processed_urls: 0,\n                successful_urls: 0,\n                failed_urls: 0,\n                progress_percentage: 0\n            });\n            // Extract URLs from job source data\n            const urls = await this.extractUrlsFromJobSource(job);\n            if (urls.length === 0) {\n                throw new Error('No URLs found to process in job source data');\n            }\n            console.log(`📋 Found ${urls.length} URLs to process`);\n            // Log URL extraction\n            await this.jobLogger.logJobEvent({\n                job_id: jobId,\n                level: 'INFO',\n                message: `Found ${urls.length} URLs to process`,\n                metadata: {\n                    event_type: 'urls_extracted',\n                    url_count: urls.length,\n                    job_type: job.type\n                }\n            });\n            // Create URL submissions for tracking\n            await this.createUrlSubmissionsForJob(jobId, urls);\n            // Process all URLs through Google's Indexing API\n            await this.processUrlSubmissionsWithGoogleAPI(job);\n            // Get final stats\n            const finalJob = await this.getJobDetails(jobId);\n            const processingTimeMs = finalJob?.started_at ? new Date().getTime() - new Date(finalJob.started_at).getTime() : undefined;\n            // Mark job as completed\n            await this.updateJobStatus(jobId, 'completed', {\n                completed_at: new Date().toISOString()\n            });\n            // Log job completion\n            await this.jobLogger.logJobCompleted(jobId, job.name, {\n                total_urls: finalJob?.total_urls || 0,\n                successful_urls: finalJob?.successful_urls || 0,\n                failed_urls: finalJob?.failed_urls || 0,\n                processing_time_ms: processingTimeMs\n            });\n            // Send real-time completion update\n            this.websocketService.broadcastJobUpdate(job.user_id, jobId, {\n                status: 'completed',\n                progress: {\n                    total_urls: finalJob?.total_urls || 0,\n                    processed_urls: finalJob?.processed_urls || 0,\n                    successful_urls: finalJob?.successful_urls || 0,\n                    failed_urls: finalJob?.failed_urls || 0,\n                    progress_percentage: 100\n                }\n            });\n            console.log(`✅ Indexing job ${jobId} completed successfully`);\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(`❌ Indexing job ${jobId} failed:`, error);\n            // Get job details for logging\n            const job = await this.getJobDetails(jobId);\n            // Log job failure\n            if (job) {\n                await this.jobLogger.logJobFailed(jobId, job.name, error instanceof Error ? error.message : 'Unknown error', {\n                    error_type: error instanceof Error ? error.constructor.name : 'UnknownError',\n                    stack_trace: error instanceof Error ? error.stack : undefined\n                });\n            }\n            // Mark job as failed\n            await this.updateJobStatus(jobId, 'failed', {\n                error_message: error instanceof Error ? error.message : 'Unknown error',\n                locked_at: null,\n                locked_by: null\n            });\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        } finally{\n            this.processingJobs.delete(jobId);\n        }\n    }\n    /**\n   * Extract URLs from job source data based on job type\n   */ async extractUrlsFromJobSource(job) {\n        try {\n            if (job.type === 'manual') {\n                // For manual jobs, URLs are stored in source_data.urls\n                const urls = job.source_data?.urls || [];\n                console.log(`📝 Manual job: extracted ${urls.length} URLs`);\n                return urls;\n            } else if (job.type === 'sitemap') {\n                // For sitemap jobs, parse the sitemap URL\n                const sitemapUrl = job.source_data?.sitemapUrl;\n                if (!sitemapUrl) {\n                    throw new Error('No sitemap URL found in job source data');\n                }\n                console.log(`🗺️ Sitemap job: parsing ${sitemapUrl}`);\n                return await this.parseSitemapUrls(sitemapUrl);\n            }\n            return [];\n        } catch (error) {\n            console.error('Error extracting URLs from job source:', error);\n            throw error;\n        }\n    }\n    /**\n   * Parse sitemap XML to extract all URLs\n   */ async parseSitemapUrls(sitemapUrl) {\n        try {\n            console.log(`🔍 Fetching sitemap: ${sitemapUrl}`);\n            const response = await fetch(sitemapUrl);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch sitemap: ${response.status} ${response.statusText}`);\n            }\n            const xmlContent = await response.text();\n            const xml2js = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/xmlbuilder\"), __webpack_require__.e(\"vendor-chunks/xml2js\"), __webpack_require__.e(\"vendor-chunks/sax\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! xml2js */ \"(rsc)/./node_modules/xml2js/lib/xml2js.js\", 23));\n            const parser = new xml2js.Parser();\n            const parsedXml = await parser.parseStringPromise(xmlContent);\n            const urls = [];\n            // Handle regular sitemap with URL entries\n            if (parsedXml.urlset?.url) {\n                parsedXml.urlset.url.forEach((urlEntry)=>{\n                    if (urlEntry.loc?.[0]) {\n                        urls.push(urlEntry.loc[0]);\n                    }\n                });\n            }\n            // Handle sitemap index with nested sitemaps\n            if (parsedXml.sitemapindex?.sitemap) {\n                for (const sitemapEntry of parsedXml.sitemapindex.sitemap){\n                    if (sitemapEntry.loc?.[0]) {\n                        const nestedUrls = await this.parseSitemapUrls(sitemapEntry.loc[0]);\n                        urls.push(...nestedUrls);\n                    }\n                }\n            }\n            console.log(`✅ Extracted ${urls.length} URLs from sitemap`);\n            return urls;\n        } catch (error) {\n            console.error('Error parsing sitemap:', error);\n            throw new Error(`Sitemap parsing failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    /**\n   * Create URL submission records for tracking individual URL processing\n   */ async createUrlSubmissionsForJob(jobId, urls) {\n        try {\n            console.log(`📊 Creating ${urls.length} URL submission records`);\n            const submissions = urls.map((url)=>({\n                    job_id: jobId,\n                    url: url,\n                    status: 'pending',\n                    retry_count: 0,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                }));\n            // Insert submissions in batches to avoid database limits\n            const batchSize = 100;\n            for(let i = 0; i < submissions.length; i += batchSize){\n                const batch = submissions.slice(i, i + batchSize);\n                const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_url_submissions').insert(batch);\n                if (error) {\n                    throw new Error(`Failed to create URL submissions: ${error.message}`);\n                }\n            }\n            // Update job with total URL count\n            await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_jobs').update({\n                total_urls: urls.length,\n                updated_at: new Date().toISOString()\n            }).eq('id', jobId);\n            console.log(`✅ Created ${urls.length} URL submission records`);\n        } catch (error) {\n            console.error('Error creating URL submissions:', error);\n            throw error;\n        }\n    }\n    /**\n   * Process all URL submissions through Google's Indexing API\n   */ async processUrlSubmissionsWithGoogleAPI(job) {\n        try {\n            console.log(`🔄 Processing URL submissions for job ${job.id}`);\n            // Get active service accounts for load balancing\n            const { data: serviceAccounts, error: saError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_google_service_accounts').select('*').eq('user_id', job.user_id).eq('is_active', true);\n            if (saError || !serviceAccounts || serviceAccounts.length === 0) {\n                throw new Error('No active Google service accounts found for user');\n            }\n            console.log(`📈 Using ${serviceAccounts.length} service accounts for load balancing`);\n            // Get pending submissions for this job\n            const { data: submissions, error: subError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_url_submissions').select('*').eq('job_id', job.id).eq('status', 'pending').order('created_at');\n            if (subError) {\n                throw new Error(`Error fetching URL submissions: ${subError.message}`);\n            }\n            if (!submissions || submissions.length === 0) {\n                console.log('⚠️ No pending submissions found for processing');\n                return;\n            }\n            console.log(`🎯 Processing ${submissions.length} URL submissions`);\n            let processed = 0;\n            let successful = 0;\n            let failed = 0;\n            // Process each URL submission\n            for (const submission of submissions){\n                try {\n                    // Round-robin service account selection for load balancing\n                    const serviceAccount = serviceAccounts[processed % serviceAccounts.length];\n                    // Log service account usage\n                    await this.jobLogger.logServiceAccountUsage(job.id, serviceAccount.email, 'selected_for_url_processing');\n                    // Get access token for Google API\n                    const accessToken = await this.googleAuth.getAccessToken(serviceAccount.id);\n                    if (!accessToken) {\n                        console.log(`⚠️ Skipping service account ${serviceAccount.id} - no valid access token (likely missing credentials)`);\n                        await this.jobLogger.logWarning(job.id, `Skipping service account ${serviceAccount.email} - no valid access token`, {\n                            service_account_id: serviceAccount.id,\n                            service_account_email: serviceAccount.email\n                        });\n                        continue; // Skip this service account and try the next one\n                    }\n                    // Submit URL to Google's Indexing API\n                    const startTime = Date.now();\n                    await this.submitUrlToGoogleIndexingAPI(submission.url, accessToken);\n                    const responseTime = Date.now() - startTime;\n                    // Update submission as successful\n                    await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_url_submissions').update({\n                        status: 'submitted',\n                        submitted_at: new Date().toISOString(),\n                        service_account_id: serviceAccount.id,\n                        updated_at: new Date().toISOString()\n                    }).eq('id', submission.id);\n                    // Update quota usage for the service account (-1 for successful request)\n                    await this.updateQuotaUsage(serviceAccount.id, true);\n                    // Log successful URL processing\n                    await this.jobLogger.logUrlProcessed(job.id, submission.url, true, undefined, responseTime);\n                    const remainingQuota = await this.getRemainingQuota(serviceAccount.id);\n                    await this.jobLogger.logQuotaUsage(job.id, serviceAccount.id, remainingQuota);\n                    successful++;\n                    console.log(`✅ Successfully indexed: ${submission.url}`);\n                } catch (error) {\n                    console.error(`❌ Failed to index ${submission.url}:`, error);\n                    // Get the service account for this submission\n                    const serviceAccount = serviceAccounts[processed % serviceAccounts.length];\n                    // Log failed URL processing\n                    await this.jobLogger.logUrlProcessed(job.id, submission.url, false, error instanceof Error ? error.message : 'Unknown error');\n                    // Update submission as failed\n                    await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_url_submissions').update({\n                        status: 'failed',\n                        error_message: error instanceof Error ? error.message : 'Indexing failed',\n                        retry_count: submission.retry_count + 1,\n                        service_account_id: serviceAccount.id,\n                        updated_at: new Date().toISOString()\n                    }).eq('id', submission.id);\n                    // Update quota usage for the service account (still counts as a request attempt)\n                    await this.updateQuotaUsage(serviceAccount.id, false);\n                    failed++;\n                }\n                processed++;\n                // Update job progress in real-time\n                const progressPercentage = Math.round(processed / submissions.length * 100);\n                await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_jobs').update({\n                    processed_urls: processed,\n                    successful_urls: successful,\n                    failed_urls: failed,\n                    progress_percentage: progressPercentage,\n                    updated_at: new Date().toISOString()\n                }).eq('id', job.id);\n                // Log progress update every 10 processed URLs or on completion\n                if (processed % 10 === 0 || processed === submissions.length) {\n                    await this.jobLogger.logProgressUpdate(job.id, progressPercentage, processed, submissions.length);\n                }\n                // Send real-time progress update via WebSocket\n                this.websocketService.broadcastJobUpdate(job.user_id, job.id, {\n                    status: 'running',\n                    progress: {\n                        total_urls: submissions.length,\n                        processed_urls: processed,\n                        successful_urls: successful,\n                        failed_urls: failed,\n                        progress_percentage: progressPercentage\n                    }\n                });\n                // Respect Google API rate limits\n                await new Promise((resolve)=>setTimeout(resolve, 100));\n            }\n            console.log(`📊 Job processing complete: ${successful} successful, ${failed} failed out of ${processed} total`);\n        } catch (error) {\n            console.error('Error processing URL submissions:', error);\n            throw error;\n        }\n    }\n    /**\n   * Submit individual URL to Google's Indexing API\n   */ async submitUrlToGoogleIndexingAPI(url, accessToken) {\n        const apiUrl = 'https://indexing.googleapis.com/v3/urlNotifications:publish';\n        const response = await fetch(apiUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${accessToken}`\n            },\n            body: JSON.stringify({\n                url: url,\n                type: 'URL_UPDATED'\n            })\n        });\n        if (!response.ok) {\n            const errorData = await response.json().catch(()=>({}));\n            const errorMessage = errorData.error?.message || `HTTP ${response.status}: ${response.statusText}`;\n            throw new Error(`Google Indexing API error: ${errorMessage}`);\n        }\n        // Log successful response for debugging\n        const responseData = await response.json();\n        console.log(`🎯 Google API response for ${url}:`, responseData);\n    }\n    /**\n   * Update quota usage for a service account\n   */ async updateQuotaUsage(serviceAccountId, successful) {\n        try {\n            const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format\n            // Get current quota usage for today\n            const { data: currentUsage, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_google_quota_usage').select('*').eq('service_account_id', serviceAccountId).eq('date', today).single();\n            if (fetchError && fetchError.code !== 'PGRST116') {\n                console.error('Error fetching current quota usage:', fetchError);\n                return;\n            }\n            // Calculate new usage numbers\n            const currentRequestsMade = currentUsage?.requests_made || 0;\n            const currentRequestsSuccessful = currentUsage?.requests_successful || 0;\n            const currentRequestsFailed = currentUsage?.requests_failed || 0;\n            const updatedUsage = {\n                service_account_id: serviceAccountId,\n                date: today,\n                requests_made: currentRequestsMade + 1,\n                requests_successful: successful ? currentRequestsSuccessful + 1 : currentRequestsSuccessful,\n                requests_failed: successful ? currentRequestsFailed : currentRequestsFailed + 1,\n                last_request_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            };\n            // If record doesn't exist, add created_at\n            if (!currentUsage) {\n                updatedUsage.created_at = new Date().toISOString();\n            }\n            // Upsert quota usage record\n            const { error: upsertError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_google_quota_usage').upsert(updatedUsage, {\n                onConflict: 'service_account_id,date'\n            });\n            if (upsertError) {\n                console.error('Error updating quota usage:', upsertError);\n            } else {\n                console.log(`📊 Updated quota for service account ${serviceAccountId}: ${updatedUsage.requests_made} requests (${updatedUsage.requests_successful} successful, ${updatedUsage.requests_failed} failed)`);\n            }\n        } catch (error) {\n            console.error('Error in updateQuotaUsage:', error);\n        }\n    }\n    /**\n   * Lock job to prevent concurrent processing\n   */ async lockJobForProcessing(jobId) {\n        try {\n            const lockTime = new Date().toISOString();\n            const lockId = `processor-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_jobs').update({\n                status: 'running'\n            }).eq('id', jobId).eq('status', 'pending').select();\n            // Send real-time status update\n            if (data && data.length > 0) {\n                // Get user_id from the job data\n                const job = await this.getJobDetails(jobId);\n                if (job) {\n                    this.websocketService.broadcastJobUpdate(job.user_id, jobId, {\n                        status: 'running',\n                        progress: {\n                            total_urls: job.total_urls,\n                            processed_urls: 0,\n                            successful_urls: 0,\n                            failed_urls: 0,\n                            progress_percentage: 0\n                        }\n                    });\n                }\n            }\n            if (error) {\n                console.error('Error locking job:', error);\n                return false;\n            }\n            const success = data && data.length > 0;\n            if (!success) {\n                console.log(`Job ${jobId} is already locked or not in pending status`);\n            }\n            return success;\n        } catch (error) {\n            console.error('Error locking job:', error);\n            return false;\n        }\n    }\n    /**\n   * Get job details from database\n   */ async getJobDetails(jobId) {\n        try {\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_jobs').select('*').eq('id', jobId).single();\n            return error ? null : data;\n        } catch (error) {\n            console.error('Error getting job details:', error);\n            return null;\n        }\n    }\n    /**\n   * Update job status and additional fields\n   */ async updateJobStatus(jobId, status, extraFields = {}) {\n        try {\n            await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_jobs').update({\n                status,\n                updated_at: new Date().toISOString(),\n                ...extraFields\n            }).eq('id', jobId);\n        } catch (error) {\n            console.error('Error updating job status:', error);\n        }\n    }\n    /**\n   * Get remaining quota for a service account\n   */ async getRemainingQuota(serviceAccountId) {\n        try {\n            const today = new Date().toISOString().split('T')[0];\n            // Get service account quota limit\n            const { data: serviceAccount } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_google_service_accounts').select('daily_quota_limit').eq('id', serviceAccountId).single();\n            const dailyLimit = serviceAccount?.daily_quota_limit || 200; // Default Google API limit\n            // Get current usage\n            const { data: usage } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_google_quota_usage').select('requests_made').eq('service_account_id', serviceAccountId).eq('date', today).single();\n            const usedRequests = usage?.requests_made || 0;\n            return Math.max(0, dailyLimit - usedRequests);\n        } catch (error) {\n            console.error('Error getting remaining quota:', error);\n            return 0;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-indexing-processor.ts\n");

/***/ }),

/***/ "(rsc)/./lib/job-logging-service.ts":
/*!************************************!*\
  !*** ./lib/job-logging-service.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JobLoggingService: () => (/* binding */ JobLoggingService)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(rsc)/./lib/supabase.ts\");\n\n/**\n * Job Logging Service\n * \n * Handles detailed logging of job execution events to the indb_indexing_job_logs table\n * Provides comprehensive tracking of job processing steps, errors, and performance metrics\n */ class JobLoggingService {\n    constructor(){}\n    static getInstance() {\n        if (!JobLoggingService.instance) {\n            JobLoggingService.instance = new JobLoggingService();\n        }\n        return JobLoggingService.instance;\n    }\n    /**\n   * Log a job event to the database\n   */ async logJobEvent(entry) {\n        try {\n            const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from('indb_indexing_job_logs').insert({\n                job_id: entry.job_id,\n                level: entry.level.toLowerCase(),\n                message: entry.message,\n                metadata: entry.metadata || null,\n                created_at: new Date().toISOString()\n            });\n            if (error) {\n                console.error('Failed to log job event:', error);\n            }\n        } catch (error) {\n            console.error('Error logging job event:', error);\n        }\n    }\n    /**\n   * Log job start event\n   */ async logJobStarted(jobId, jobName, totalUrls) {\n        await this.logJobEvent({\n            job_id: jobId,\n            level: 'INFO',\n            message: `Job started: ${jobName}`,\n            metadata: {\n                job_name: jobName,\n                event_type: 'job_started',\n                started_at: new Date().toISOString(),\n                total_urls: totalUrls\n            }\n        });\n    }\n    /**\n   * Log job completion event\n   */ async logJobCompleted(jobId, jobName, stats) {\n        await this.logJobEvent({\n            job_id: jobId,\n            level: 'INFO',\n            message: `Job completed: ${jobName}`,\n            metadata: {\n                job_name: jobName,\n                event_type: 'job_completed',\n                completed_at: new Date().toISOString(),\n                ...stats\n            }\n        });\n    }\n    /**\n   * Log job failure event\n   */ async logJobFailed(jobId, jobName, errorMessage, metadata) {\n        await this.logJobEvent({\n            job_id: jobId,\n            level: 'ERROR',\n            message: `Job failed: ${jobName} - ${errorMessage}`,\n            metadata: {\n                job_name: jobName,\n                event_type: 'job_failed',\n                error_message: errorMessage,\n                failed_at: new Date().toISOString(),\n                ...metadata\n            }\n        });\n    }\n    /**\n   * Log URL processing event\n   */ async logUrlProcessed(jobId, url, success, errorMessage, responseTime) {\n        await this.logJobEvent({\n            job_id: jobId,\n            level: success ? 'INFO' : 'ERROR',\n            message: success ? `Successfully indexed URL: ${url}` : `Failed to index URL: ${url}`,\n            metadata: {\n                event_type: 'url_processed',\n                url: url,\n                success: success,\n                error_message: errorMessage,\n                response_time_ms: responseTime,\n                processed_at: new Date().toISOString()\n            }\n        });\n    }\n    /**\n   * Log quota usage event\n   */ async logQuotaUsage(jobId, serviceAccountId, remainingQuota, apiResponse) {\n        await this.logJobEvent({\n            job_id: jobId,\n            level: 'DEBUG',\n            message: `Quota usage updated - ${remainingQuota} requests remaining`,\n            metadata: {\n                event_type: 'quota_usage',\n                service_account_id: serviceAccountId,\n                remaining_quota: remainingQuota,\n                api_response: apiResponse,\n                timestamp: new Date().toISOString()\n            }\n        });\n    }\n    /**\n   * Log service account usage\n   */ async logServiceAccountUsage(jobId, serviceAccountEmail, action) {\n        await this.logJobEvent({\n            job_id: jobId,\n            level: 'DEBUG',\n            message: `Service account ${action}: ${serviceAccountEmail}`,\n            metadata: {\n                event_type: 'service_account_usage',\n                service_account_email: serviceAccountEmail,\n                action: action,\n                timestamp: new Date().toISOString()\n            }\n        });\n    }\n    /**\n   * Log progress update\n   */ async logProgressUpdate(jobId, progress, processedUrls, totalUrls) {\n        await this.logJobEvent({\n            job_id: jobId,\n            level: 'INFO',\n            message: `Progress update: ${processedUrls}/${totalUrls} URLs processed (${progress.toFixed(1)}%)`,\n            metadata: {\n                event_type: 'progress_update',\n                progress_percentage: progress,\n                processed_urls: processedUrls,\n                total_urls: totalUrls,\n                timestamp: new Date().toISOString()\n            }\n        });\n    }\n    /**\n   * Log Google API interaction\n   */ async logGoogleApiCall(jobId, url, statusCode, responseData, errorMessage) {\n        await this.logJobEvent({\n            job_id: jobId,\n            level: statusCode >= 400 ? 'ERROR' : 'DEBUG',\n            message: `Google API call for ${url}: ${statusCode}`,\n            metadata: {\n                event_type: 'google_api_call',\n                url: url,\n                status_code: statusCode,\n                response_data: responseData,\n                error_message: errorMessage,\n                timestamp: new Date().toISOString()\n            }\n        });\n    }\n    /**\n   * Log warning events\n   */ async logWarning(jobId, message, metadata) {\n        await this.logJobEvent({\n            job_id: jobId,\n            level: 'WARN',\n            message: message,\n            metadata: {\n                event_type: 'warning',\n                timestamp: new Date().toISOString(),\n                ...metadata\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q25DO1FBQ0Y7SUFDRjtJQUVBOztHQUVDLEdBQ0QsTUFBTXlDLGlCQUFpQnRDLEtBQWEsRUFBRWUsR0FBVyxFQUFFd0IsVUFBa0IsRUFBRUMsWUFBa0IsRUFBRTdCLFlBQXFCLEVBQWlCO1FBQy9ILE1BQU0sSUFBSSxDQUFDMUIsV0FBVyxDQUFDO1lBQ3JCSyxRQUFRVTtZQUNSVCxPQUFPZ0QsY0FBYyxNQUFNLFVBQVU7WUFDckM5QyxTQUFTLENBQUMsb0JBQW9CLEVBQUVzQixJQUFJLEVBQUUsRUFBRXdCLFlBQVk7WUFDcEQ3QyxVQUFVO2dCQUNSVSxZQUFZO2dCQUNaVyxLQUFLQTtnQkFDTDBCLGFBQWFGO2dCQUNiRyxlQUFlRjtnQkFDZjVCLGVBQWVEO2dCQUNmZ0IsV0FBVyxJQUFJL0IsT0FBT0MsV0FBVztZQUNuQztRQUNGO0lBQ0Y7SUFFQTs7R0FFQyxHQUNELE1BQU04QyxXQUFXM0MsS0FBYSxFQUFFUCxPQUFlLEVBQUVDLFFBQThCLEVBQWlCO1FBQzlGLE1BQU0sSUFBSSxDQUFDVCxXQUFXLENBQUM7WUFDckJLLFFBQVFVO1lBQ1JULE9BQU87WUFDUEUsU0FBU0E7WUFDVEMsVUFBVTtnQkFDUlUsWUFBWTtnQkFDWnVCLFdBQVcsSUFBSS9CLE9BQU9DLFdBQVc7Z0JBQ2pDLEdBQUdILFFBQVE7WUFDYjtRQUNGO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9saWIvam9iLWxvZ2dpbmctc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdXBhYmFzZUFkbWluIH0gZnJvbSAnLi9zdXBhYmFzZSc7XG5cbmV4cG9ydCB0eXBlIExvZ0xldmVsID0gJ0lORk8nIHwgJ1dBUk4nIHwgJ0VSUk9SJyB8ICdERUJVRyc7XG5cbmludGVyZmFjZSBKb2JMb2dFbnRyeSB7XG4gIGpvYl9pZDogc3RyaW5nO1xuICBsZXZlbDogTG9nTGV2ZWw7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xufVxuXG4vKipcbiAqIEpvYiBMb2dnaW5nIFNlcnZpY2VcbiAqIFxuICogSGFuZGxlcyBkZXRhaWxlZCBsb2dnaW5nIG9mIGpvYiBleGVjdXRpb24gZXZlbnRzIHRvIHRoZSBpbmRiX2luZGV4aW5nX2pvYl9sb2dzIHRhYmxlXG4gKiBQcm92aWRlcyBjb21wcmVoZW5zaXZlIHRyYWNraW5nIG9mIGpvYiBwcm9jZXNzaW5nIHN0ZXBzLCBlcnJvcnMsIGFuZCBwZXJmb3JtYW5jZSBtZXRyaWNzXG4gKi9cbmV4cG9ydCBjbGFzcyBKb2JMb2dnaW5nU2VydmljZSB7XG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBKb2JMb2dnaW5nU2VydmljZTtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgc3RhdGljIGdldEluc3RhbmNlKCk6IEpvYkxvZ2dpbmdTZXJ2aWNlIHtcbiAgICBpZiAoIUpvYkxvZ2dpbmdTZXJ2aWNlLmluc3RhbmNlKSB7XG4gICAgICBKb2JMb2dnaW5nU2VydmljZS5pbnN0YW5jZSA9IG5ldyBKb2JMb2dnaW5nU2VydmljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gSm9iTG9nZ2luZ1NlcnZpY2UuaW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICogTG9nIGEgam9iIGV2ZW50IHRvIHRoZSBkYXRhYmFzZVxuICAgKi9cbiAgYXN5bmMgbG9nSm9iRXZlbnQoZW50cnk6IEpvYkxvZ0VudHJ5KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlQWRtaW5cbiAgICAgICAgLmZyb20oJ2luZGJfaW5kZXhpbmdfam9iX2xvZ3MnKVxuICAgICAgICAuaW5zZXJ0KHtcbiAgICAgICAgICBqb2JfaWQ6IGVudHJ5LmpvYl9pZCxcbiAgICAgICAgICBsZXZlbDogZW50cnkubGV2ZWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICBtZXNzYWdlOiBlbnRyeS5tZXNzYWdlLFxuICAgICAgICAgIG1ldGFkYXRhOiBlbnRyeS5tZXRhZGF0YSB8fCBudWxsLFxuICAgICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICB9KTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBsb2cgam9iIGV2ZW50OicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9nZ2luZyBqb2IgZXZlbnQ6JywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMb2cgam9iIHN0YXJ0IGV2ZW50XG4gICAqL1xuICBhc3luYyBsb2dKb2JTdGFydGVkKGpvYklkOiBzdHJpbmcsIGpvYk5hbWU6IHN0cmluZywgdG90YWxVcmxzOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLmxvZ0pvYkV2ZW50KHtcbiAgICAgIGpvYl9pZDogam9iSWQsXG4gICAgICBsZXZlbDogJ0lORk8nLFxuICAgICAgbWVzc2FnZTogYEpvYiBzdGFydGVkOiAke2pvYk5hbWV9YCxcbiAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgIGpvYl9uYW1lOiBqb2JOYW1lLFxuICAgICAgICBldmVudF90eXBlOiAnam9iX3N0YXJ0ZWQnLFxuICAgICAgICBzdGFydGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHRvdGFsX3VybHM6IHRvdGFsVXJsc1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIExvZyBqb2IgY29tcGxldGlvbiBldmVudFxuICAgKi9cbiAgYXN5bmMgbG9nSm9iQ29tcGxldGVkKGpvYklkOiBzdHJpbmcsIGpvYk5hbWU6IHN0cmluZywgc3RhdHM6IHsgXG4gICAgdG90YWxfdXJsczogbnVtYmVyOyBcbiAgICBzdWNjZXNzZnVsX3VybHM6IG51bWJlcjsgXG4gICAgZmFpbGVkX3VybHM6IG51bWJlcjtcbiAgICBwcm9jZXNzaW5nX3RpbWVfbXM/OiBudW1iZXI7XG4gIH0pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLmxvZ0pvYkV2ZW50KHtcbiAgICAgIGpvYl9pZDogam9iSWQsXG4gICAgICBsZXZlbDogJ0lORk8nLFxuICAgICAgbWVzc2FnZTogYEpvYiBjb21wbGV0ZWQ6ICR7am9iTmFtZX1gLFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgam9iX25hbWU6IGpvYk5hbWUsXG4gICAgICAgIGV2ZW50X3R5cGU6ICdqb2JfY29tcGxldGVkJyxcbiAgICAgICAgY29tcGxldGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIC4uLnN0YXRzXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTG9nIGpvYiBmYWlsdXJlIGV2ZW50XG4gICAqL1xuICBhc3luYyBsb2dKb2JGYWlsZWQoam9iSWQ6IHN0cmluZywgam9iTmFtZTogc3RyaW5nLCBlcnJvck1lc3NhZ2U6IHN0cmluZywgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5sb2dKb2JFdmVudCh7XG4gICAgICBqb2JfaWQ6IGpvYklkLFxuICAgICAgbGV2ZWw6ICdFUlJPUicsXG4gICAgICBtZXNzYWdlOiBgSm9iIGZhaWxlZDogJHtqb2JOYW1lfSAtICR7ZXJyb3JNZXNzYWdlfWAsXG4gICAgICBtZXRhZGF0YToge1xuICAgICAgICBqb2JfbmFtZTogam9iTmFtZSxcbiAgICAgICAgZXZlbnRfdHlwZTogJ2pvYl9mYWlsZWQnLFxuICAgICAgICBlcnJvcl9tZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgIGZhaWxlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAuLi5tZXRhZGF0YVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIExvZyBVUkwgcHJvY2Vzc2luZyBldmVudFxuICAgKi9cbiAgYXN5bmMgbG9nVXJsUHJvY2Vzc2VkKGpvYklkOiBzdHJpbmcsIHVybDogc3RyaW5nLCBzdWNjZXNzOiBib29sZWFuLCBlcnJvck1lc3NhZ2U/OiBzdHJpbmcsIHJlc3BvbnNlVGltZT86IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMubG9nSm9iRXZlbnQoe1xuICAgICAgam9iX2lkOiBqb2JJZCxcbiAgICAgIGxldmVsOiBzdWNjZXNzID8gJ0lORk8nIDogJ0VSUk9SJyxcbiAgICAgIG1lc3NhZ2U6IHN1Y2Nlc3MgPyBgU3VjY2Vzc2Z1bGx5IGluZGV4ZWQgVVJMOiAke3VybH1gIDogYEZhaWxlZCB0byBpbmRleCBVUkw6ICR7dXJsfWAsXG4gICAgICBtZXRhZGF0YToge1xuICAgICAgICBldmVudF90eXBlOiAndXJsX3Byb2Nlc3NlZCcsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBzdWNjZXNzOiBzdWNjZXNzLFxuICAgICAgICBlcnJvcl9tZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgIHJlc3BvbnNlX3RpbWVfbXM6IHJlc3BvbnNlVGltZSxcbiAgICAgICAgcHJvY2Vzc2VkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2cgcXVvdGEgdXNhZ2UgZXZlbnRcbiAgICovXG4gIGFzeW5jIGxvZ1F1b3RhVXNhZ2Uoam9iSWQ6IHN0cmluZywgc2VydmljZUFjY291bnRJZDogc3RyaW5nLCByZW1haW5pbmdRdW90YTogbnVtYmVyLCBhcGlSZXNwb25zZT86IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMubG9nSm9iRXZlbnQoe1xuICAgICAgam9iX2lkOiBqb2JJZCxcbiAgICAgIGxldmVsOiAnREVCVUcnLFxuICAgICAgbWVzc2FnZTogYFF1b3RhIHVzYWdlIHVwZGF0ZWQgLSAke3JlbWFpbmluZ1F1b3RhfSByZXF1ZXN0cyByZW1haW5pbmdgLFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgZXZlbnRfdHlwZTogJ3F1b3RhX3VzYWdlJyxcbiAgICAgICAgc2VydmljZV9hY2NvdW50X2lkOiBzZXJ2aWNlQWNjb3VudElkLFxuICAgICAgICByZW1haW5pbmdfcXVvdGE6IHJlbWFpbmluZ1F1b3RhLFxuICAgICAgICBhcGlfcmVzcG9uc2U6IGFwaVJlc3BvbnNlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIExvZyBzZXJ2aWNlIGFjY291bnQgdXNhZ2VcbiAgICovXG4gIGFzeW5jIGxvZ1NlcnZpY2VBY2NvdW50VXNhZ2Uoam9iSWQ6IHN0cmluZywgc2VydmljZUFjY291bnRFbWFpbDogc3RyaW5nLCBhY3Rpb246IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMubG9nSm9iRXZlbnQoe1xuICAgICAgam9iX2lkOiBqb2JJZCxcbiAgICAgIGxldmVsOiAnREVCVUcnLFxuICAgICAgbWVzc2FnZTogYFNlcnZpY2UgYWNjb3VudCAke2FjdGlvbn06ICR7c2VydmljZUFjY291bnRFbWFpbH1gLFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgZXZlbnRfdHlwZTogJ3NlcnZpY2VfYWNjb3VudF91c2FnZScsXG4gICAgICAgIHNlcnZpY2VfYWNjb3VudF9lbWFpbDogc2VydmljZUFjY291bnRFbWFpbCxcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTG9nIHByb2dyZXNzIHVwZGF0ZVxuICAgKi9cbiAgYXN5bmMgbG9nUHJvZ3Jlc3NVcGRhdGUoam9iSWQ6IHN0cmluZywgcHJvZ3Jlc3M6IG51bWJlciwgcHJvY2Vzc2VkVXJsczogbnVtYmVyLCB0b3RhbFVybHM6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMubG9nSm9iRXZlbnQoe1xuICAgICAgam9iX2lkOiBqb2JJZCxcbiAgICAgIGxldmVsOiAnSU5GTycsXG4gICAgICBtZXNzYWdlOiBgUHJvZ3Jlc3MgdXBkYXRlOiAke3Byb2Nlc3NlZFVybHN9LyR7dG90YWxVcmxzfSBVUkxzIHByb2Nlc3NlZCAoJHtwcm9ncmVzcy50b0ZpeGVkKDEpfSUpYCxcbiAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgIGV2ZW50X3R5cGU6ICdwcm9ncmVzc191cGRhdGUnLFxuICAgICAgICBwcm9ncmVzc19wZXJjZW50YWdlOiBwcm9ncmVzcyxcbiAgICAgICAgcHJvY2Vzc2VkX3VybHM6IHByb2Nlc3NlZFVybHMsXG4gICAgICAgIHRvdGFsX3VybHM6IHRvdGFsVXJscyxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2cgR29vZ2xlIEFQSSBpbnRlcmFjdGlvblxuICAgKi9cbiAgYXN5bmMgbG9nR29vZ2xlQXBpQ2FsbChqb2JJZDogc3RyaW5nLCB1cmw6IHN0cmluZywgc3RhdHVzQ29kZTogbnVtYmVyLCByZXNwb25zZURhdGE/OiBhbnksIGVycm9yTWVzc2FnZT86IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMubG9nSm9iRXZlbnQoe1xuICAgICAgam9iX2lkOiBqb2JJZCxcbiAgICAgIGxldmVsOiBzdGF0dXNDb2RlID49IDQwMCA/ICdFUlJPUicgOiAnREVCVUcnLFxuICAgICAgbWVzc2FnZTogYEdvb2dsZSBBUEkgY2FsbCBmb3IgJHt1cmx9OiAke3N0YXR1c0NvZGV9YCxcbiAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgIGV2ZW50X3R5cGU6ICdnb29nbGVfYXBpX2NhbGwnLFxuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgc3RhdHVzX2NvZGU6IHN0YXR1c0NvZGUsXG4gICAgICAgIHJlc3BvbnNlX2RhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgZXJyb3JfbWVzc2FnZTogZXJyb3JNZXNzYWdlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIExvZyB3YXJuaW5nIGV2ZW50c1xuICAgKi9cbiAgYXN5bmMgbG9nV2FybmluZyhqb2JJZDogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55Pik6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMubG9nSm9iRXZlbnQoe1xuICAgICAgam9iX2lkOiBqb2JJZCxcbiAgICAgIGxldmVsOiAnV0FSTicsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgZXZlbnRfdHlwZTogJ3dhcm5pbmcnLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgLi4ubWV0YWRhdGFcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSJdLCJuYW1lcyI6WyJzdXBhYmFzZUFkbWluIiwiSm9iTG9nZ2luZ1NlcnZpY2UiLCJnZXRJbnN0YW5jZSIsImluc3RhbmNlIiwibG9nSm9iRXZlbnQiLCJlbnRyeSIsImVycm9yIiwiZnJvbSIsImluc2VydCIsImpvYl9pZCIsImxldmVsIiwidG9Mb3dlckNhc2UiLCJtZXNzYWdlIiwibWV0YWRhdGEiLCJjcmVhdGVkX2F0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiY29uc29sZSIsImxvZ0pvYlN0YXJ0ZWQiLCJqb2JJZCIsImpvYk5hbWUiLCJ0b3RhbFVybHMiLCJqb2JfbmFtZSIsImV2ZW50X3R5cGUiLCJzdGFydGVkX2F0IiwidG90YWxfdXJscyIsImxvZ0pvYkNvbXBsZXRlZCIsInN0YXRzIiwiY29tcGxldGVkX2F0IiwibG9nSm9iRmFpbGVkIiwiZXJyb3JNZXNzYWdlIiwiZXJyb3JfbWVzc2FnZSIsImZhaWxlZF9hdCIsImxvZ1VybFByb2Nlc3NlZCIsInVybCIsInN1Y2Nlc3MiLCJyZXNwb25zZVRpbWUiLCJyZXNwb25zZV90aW1lX21zIiwicHJvY2Vzc2VkX2F0IiwibG9nUXVvdGFVc2FnZSIsInNlcnZpY2VBY2NvdW50SWQiLCJyZW1haW5pbmdRdW90YSIsImFwaVJlc3BvbnNlIiwic2VydmljZV9hY2NvdW50X2lkIiwicmVtYWluaW5nX3F1b3RhIiwiYXBpX3Jlc3BvbnNlIiwidGltZXN0YW1wIiwibG9nU2VydmljZUFjY291bnRVc2FnZSIsInNlcnZpY2VBY2NvdW50RW1haWwiLCJhY3Rpb24iLCJzZXJ2aWNlX2FjY291bnRfZW1haWwiLCJsb2dQcm9ncmVzc1VwZGF0ZSIsInByb2dyZXNzIiwicHJvY2Vzc2VkVXJscyIsInRvRml4ZWQiLCJwcm9ncmVzc19wZXJjZW50YWdlIiwicHJvY2Vzc2VkX3VybHMiLCJsb2dHb29nbGVBcGlDYWxsIiwic3RhdHVzQ29kZSIsInJlc3BvbnNlRGF0YSIsInN0YXR1c19jb2RlIiwicmVzcG9uc2VfZGF0YSIsImxvZ1dhcm5pbmciXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/job-logging-service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/job-monitor.ts":
/*!****************************!*\
  !*** ./lib/job-monitor.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JobMonitor: () => (/* binding */ JobMonitor),\n/* harmony export */   jobMonitor: () => (/* binding */ jobMonitor)\n/* harmony export */ });\n/* harmony import */ var node_cron__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-cron */ \"node-cron\");\n/* harmony import */ var node_cron__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_cron__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./supabase */ \"(rsc)/./lib/supabase.ts\");\n/* harmony import */ var _google_indexing_processor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./google-indexing-processor */ \"(rsc)/./lib/google-indexing-processor.ts\");\n\n\n\n/**\n * Job Monitor Service\n * \n * This service runs as a background worker that:\n * 1. Monitors for pending jobs every minute\n * 2. Automatically triggers processing for pending jobs\n * 3. Handles scheduled jobs based on their next_run_at time\n * 4. Ensures only one instance processes jobs to prevent conflicts\n */ class JobMonitor {\n    constructor(){\n        this.isRunning = false;\n        this.cronJob = null;\n        this.processor = _google_indexing_processor__WEBPACK_IMPORTED_MODULE_2__.GoogleIndexingProcessor.getInstance();\n    }\n    static getInstance() {\n        if (!JobMonitor.instance) {\n            JobMonitor.instance = new JobMonitor();\n        }\n        return JobMonitor.instance;\n    }\n    /**\n   * Start the job monitor\n   * Runs every minute to check for pending jobs\n   */ start() {\n        if (this.isRunning) {\n            console.log('Job monitor is already running');\n            return;\n        }\n        console.log('Starting job monitor...');\n        this.isRunning = true;\n        // Run every minute to check for pending jobs\n        this.cronJob = node_cron__WEBPACK_IMPORTED_MODULE_0__.schedule('* * * * *', async ()=>{\n            await this.checkAndProcessJobs();\n        }, {\n            timezone: 'UTC'\n        });\n        console.log('Job monitor started - checking for jobs every minute');\n    }\n    /**\n   * Stop the job monitor\n   */ stop() {\n        if (!this.isRunning) {\n            console.log('Job monitor is not running');\n            return;\n        }\n        console.log('Stopping job monitor...');\n        this.isRunning = false;\n        if (this.cronJob) {\n            this.cronJob.destroy();\n            this.cronJob = null;\n        }\n        console.log('Job monitor stopped');\n    }\n    /**\n   * Check for pending jobs and process them\n   */ async checkAndProcessJobs() {\n        try {\n            // Find pending jobs that are ready to run\n            const { data: pendingJobs, error } = await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from('indb_indexing_jobs').select('id, name, user_id, next_run_at, schedule_type').eq('status', 'pending').is('locked_at', null).or('next_run_at.is.null,next_run_at.lte.' + new Date().toISOString()).limit(5); // Process max 5 jobs per minute to prevent overload\n            if (error) {\n                console.error('Error fetching pending jobs:', error);\n                return;\n            }\n            if (!pendingJobs || pendingJobs.length === 0) {\n                // No pending jobs found - this is normal\n                return;\n            }\n            console.log(`Found ${pendingJobs.length} pending jobs to process`);\n            // Process each job\n            for (const job of pendingJobs){\n                try {\n                    console.log(`Processing job ${job.id} (${job.name})`);\n                    const result = await this.processor.processIndexingJob(job.id);\n                    if (result.success) {\n                        console.log(`✅ Job ${job.id} completed successfully`);\n                        // Update next run time for recurring jobs\n                        if (job.schedule_type && job.schedule_type !== 'one-time') {\n                            await this.scheduleNextRun(job.id, job.schedule_type);\n                        }\n                    } else {\n                        console.log(`❌ Job ${job.id} failed: ${result.error}`);\n                    }\n                } catch (error) {\n                    console.error(`Error processing job ${job.id}:`, error);\n                }\n            }\n        } catch (error) {\n            console.error('Error in job monitor:', error);\n        }\n    }\n    /**\n   * Schedule the next run for recurring jobs\n   */ async scheduleNextRun(jobId, scheduleType) {\n        try {\n            const now = new Date();\n            let nextRun;\n            switch(scheduleType){\n                case 'hourly':\n                    nextRun = new Date(now.getTime() + 60 * 60 * 1000); // +1 hour\n                    break;\n                case 'daily':\n                    nextRun = new Date(now.getTime() + 24 * 60 * 60 * 1000); // +1 day\n                    break;\n                case 'weekly':\n                    nextRun = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000); // +1 week\n                    break;\n                case 'monthly':\n                    nextRun = new Date(now);\n                    nextRun.setMonth(nextRun.getMonth() + 1); // +1 month\n                    break;\n                default:\n                    return; // one-time jobs don't get rescheduled\n            }\n            await _supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from('indb_indexing_jobs').update({\n                status: 'pending',\n                next_run_at: nextRun.toISOString(),\n                updated_at: new Date().toISOString()\n            }).eq('id', jobId);\n            console.log(`📅 Job ${jobId} scheduled for next run at ${nextRun.toISOString()}`);\n        } catch (error) {\n            console.error(`Error scheduling next run for job ${jobId}:`, error);\n        }\n    }\n    /**\n   * Get monitor status\n   */ getStatus() {\n        return {\n            isRunning: this.isRunning,\n            nextCheck: this.cronJob ? 'Every minute' : undefined\n        };\n    }\n    /**\n   * Manually trigger job processing (for testing)\n   */ async triggerNow() {\n        console.log('Manually triggering job processing...');\n        await this.checkAndProcessJobs();\n    }\n}\n// Export singleton instance\nconst jobMonitor = JobMonitor.getInstance();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBRTBCLE1BQU0sMkJBQTJCLEVBQUVHLFFBQVFkLFdBQVcsSUFBSTtRQUNsRixFQUFFLE9BQU9QLE9BQU87WUFDZFQsUUFBUVMsS0FBSyxDQUFDLENBQUMsa0NBQWtDLEVBQUVrQixNQUFNLENBQUMsQ0FBQyxFQUFFbEI7UUFDL0Q7SUFDRjtJQUVBOztHQUVDLEdBQ0Q2QixZQUF3RDtRQUN0RCxPQUFPO1lBQ0w1QyxXQUFXLElBQUksQ0FBQ0EsU0FBUztZQUN6QjZDLFdBQVcsSUFBSSxDQUFDNUMsT0FBTyxHQUFHLGlCQUFpQjZDO1FBQzdDO0lBQ0Y7SUFFQTs7R0FFQyxHQUNELE1BQU1DLGFBQTRCO1FBQ2hDekMsUUFBUUMsR0FBRyxDQUFDO1FBQ1osTUFBTSxJQUFJLENBQUNFLG1CQUFtQjtJQUNoQztBQUNGO0FBRUEsNEJBQTRCO0FBQ3JCLE1BQU11QyxhQUFhakQsV0FBV0ksV0FBVyxHQUFHIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL2xpYi9qb2ItbW9uaXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjcm9uIGZyb20gJ25vZGUtY3Jvbic7XG5pbXBvcnQgeyBzdXBhYmFzZUFkbWluIH0gZnJvbSAnLi9zdXBhYmFzZSc7XG5pbXBvcnQgeyBHb29nbGVJbmRleGluZ1Byb2Nlc3NvciB9IGZyb20gJy4vZ29vZ2xlLWluZGV4aW5nLXByb2Nlc3Nvcic7XG5cbi8qKlxuICogSm9iIE1vbml0b3IgU2VydmljZVxuICogXG4gKiBUaGlzIHNlcnZpY2UgcnVucyBhcyBhIGJhY2tncm91bmQgd29ya2VyIHRoYXQ6XG4gKiAxLiBNb25pdG9ycyBmb3IgcGVuZGluZyBqb2JzIGV2ZXJ5IG1pbnV0ZVxuICogMi4gQXV0b21hdGljYWxseSB0cmlnZ2VycyBwcm9jZXNzaW5nIGZvciBwZW5kaW5nIGpvYnNcbiAqIDMuIEhhbmRsZXMgc2NoZWR1bGVkIGpvYnMgYmFzZWQgb24gdGhlaXIgbmV4dF9ydW5fYXQgdGltZVxuICogNC4gRW5zdXJlcyBvbmx5IG9uZSBpbnN0YW5jZSBwcm9jZXNzZXMgam9icyB0byBwcmV2ZW50IGNvbmZsaWN0c1xuICovXG5leHBvcnQgY2xhc3MgSm9iTW9uaXRvciB7XG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBKb2JNb25pdG9yO1xuICBwcml2YXRlIGlzUnVubmluZyA9IGZhbHNlO1xuICBwcml2YXRlIHByb2Nlc3NvcjogR29vZ2xlSW5kZXhpbmdQcm9jZXNzb3I7XG4gIHByaXZhdGUgY3JvbkpvYjogY3Jvbi5TY2hlZHVsZWRUYXNrIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5wcm9jZXNzb3IgPSBHb29nbGVJbmRleGluZ1Byb2Nlc3Nvci5nZXRJbnN0YW5jZSgpO1xuICB9XG5cbiAgc3RhdGljIGdldEluc3RhbmNlKCk6IEpvYk1vbml0b3Ige1xuICAgIGlmICghSm9iTW9uaXRvci5pbnN0YW5jZSkge1xuICAgICAgSm9iTW9uaXRvci5pbnN0YW5jZSA9IG5ldyBKb2JNb25pdG9yKCk7XG4gICAgfVxuICAgIHJldHVybiBKb2JNb25pdG9yLmluc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IHRoZSBqb2IgbW9uaXRvclxuICAgKiBSdW5zIGV2ZXJ5IG1pbnV0ZSB0byBjaGVjayBmb3IgcGVuZGluZyBqb2JzXG4gICAqL1xuICBzdGFydCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc1J1bm5pbmcpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdKb2IgbW9uaXRvciBpcyBhbHJlYWR5IHJ1bm5pbmcnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygnU3RhcnRpbmcgam9iIG1vbml0b3IuLi4nKTtcbiAgICB0aGlzLmlzUnVubmluZyA9IHRydWU7XG5cbiAgICAvLyBSdW4gZXZlcnkgbWludXRlIHRvIGNoZWNrIGZvciBwZW5kaW5nIGpvYnNcbiAgICB0aGlzLmNyb25Kb2IgPSBjcm9uLnNjaGVkdWxlKCcqICogKiAqIConLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCB0aGlzLmNoZWNrQW5kUHJvY2Vzc0pvYnMoKTtcbiAgICB9LCB7XG4gICAgICB0aW1lem9uZTogJ1VUQydcbiAgICB9KTtcblxuICAgIGNvbnNvbGUubG9nKCdKb2IgbW9uaXRvciBzdGFydGVkIC0gY2hlY2tpbmcgZm9yIGpvYnMgZXZlcnkgbWludXRlJyk7XG4gIH1cblxuICAvKipcbiAgICogU3RvcCB0aGUgam9iIG1vbml0b3JcbiAgICovXG4gIHN0b3AoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlzUnVubmluZykge1xuICAgICAgY29uc29sZS5sb2coJ0pvYiBtb25pdG9yIGlzIG5vdCBydW5uaW5nJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coJ1N0b3BwaW5nIGpvYiBtb25pdG9yLi4uJyk7XG4gICAgdGhpcy5pc1J1bm5pbmcgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLmNyb25Kb2IpIHtcbiAgICAgIHRoaXMuY3JvbkpvYi5kZXN0cm95KCk7XG4gICAgICB0aGlzLmNyb25Kb2IgPSBudWxsO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKCdKb2IgbW9uaXRvciBzdG9wcGVkJyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgZm9yIHBlbmRpbmcgam9icyBhbmQgcHJvY2VzcyB0aGVtXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGNoZWNrQW5kUHJvY2Vzc0pvYnMoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEZpbmQgcGVuZGluZyBqb2JzIHRoYXQgYXJlIHJlYWR5IHRvIHJ1blxuICAgICAgY29uc3QgeyBkYXRhOiBwZW5kaW5nSm9icywgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlQWRtaW5cbiAgICAgICAgLmZyb20oJ2luZGJfaW5kZXhpbmdfam9icycpXG4gICAgICAgIC5zZWxlY3QoJ2lkLCBuYW1lLCB1c2VyX2lkLCBuZXh0X3J1bl9hdCwgc2NoZWR1bGVfdHlwZScpXG4gICAgICAgIC5lcSgnc3RhdHVzJywgJ3BlbmRpbmcnKVxuICAgICAgICAuaXMoJ2xvY2tlZF9hdCcsIG51bGwpXG4gICAgICAgIC5vcignbmV4dF9ydW5fYXQuaXMubnVsbCxuZXh0X3J1bl9hdC5sdGUuJyArIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSlcbiAgICAgICAgLmxpbWl0KDUpOyAvLyBQcm9jZXNzIG1heCA1IGpvYnMgcGVyIG1pbnV0ZSB0byBwcmV2ZW50IG92ZXJsb2FkXG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBwZW5kaW5nIGpvYnM6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghcGVuZGluZ0pvYnMgfHwgcGVuZGluZ0pvYnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIE5vIHBlbmRpbmcgam9icyBmb3VuZCAtIHRoaXMgaXMgbm9ybWFsXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc29sZS5sb2coYEZvdW5kICR7cGVuZGluZ0pvYnMubGVuZ3RofSBwZW5kaW5nIGpvYnMgdG8gcHJvY2Vzc2ApO1xuXG4gICAgICAvLyBQcm9jZXNzIGVhY2ggam9iXG4gICAgICBmb3IgKGNvbnN0IGpvYiBvZiBwZW5kaW5nSm9icykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGBQcm9jZXNzaW5nIGpvYiAke2pvYi5pZH0gKCR7am9iLm5hbWV9KWApO1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMucHJvY2Vzc29yLnByb2Nlc3NJbmRleGluZ0pvYihqb2IuaWQpO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmIChyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYOKchSBKb2IgJHtqb2IuaWR9IGNvbXBsZXRlZCBzdWNjZXNzZnVsbHlgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVXBkYXRlIG5leHQgcnVuIHRpbWUgZm9yIHJlY3VycmluZyBqb2JzXG4gICAgICAgICAgICBpZiAoam9iLnNjaGVkdWxlX3R5cGUgJiYgam9iLnNjaGVkdWxlX3R5cGUgIT09ICdvbmUtdGltZScpIHtcbiAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zY2hlZHVsZU5leHRSdW4oam9iLmlkLCBqb2Iuc2NoZWR1bGVfdHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDinYwgSm9iICR7am9iLmlkfSBmYWlsZWQ6ICR7cmVzdWx0LmVycm9yfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBwcm9jZXNzaW5nIGpvYiAke2pvYi5pZH06YCwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIGpvYiBtb25pdG9yOicsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2NoZWR1bGUgdGhlIG5leHQgcnVuIGZvciByZWN1cnJpbmcgam9ic1xuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBzY2hlZHVsZU5leHRSdW4oam9iSWQ6IHN0cmluZywgc2NoZWR1bGVUeXBlOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgIGxldCBuZXh0UnVuOiBEYXRlO1xuXG4gICAgICBzd2l0Y2ggKHNjaGVkdWxlVHlwZSkge1xuICAgICAgICBjYXNlICdob3VybHknOlxuICAgICAgICAgIG5leHRSdW4gPSBuZXcgRGF0ZShub3cuZ2V0VGltZSgpICsgNjAgKiA2MCAqIDEwMDApOyAvLyArMSBob3VyXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2RhaWx5JzpcbiAgICAgICAgICBuZXh0UnVuID0gbmV3IERhdGUobm93LmdldFRpbWUoKSArIDI0ICogNjAgKiA2MCAqIDEwMDApOyAvLyArMSBkYXlcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnd2Vla2x5JzpcbiAgICAgICAgICBuZXh0UnVuID0gbmV3IERhdGUobm93LmdldFRpbWUoKSArIDcgKiAyNCAqIDYwICogNjAgKiAxMDAwKTsgLy8gKzEgd2Vla1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtb250aGx5JzpcbiAgICAgICAgICBuZXh0UnVuID0gbmV3IERhdGUobm93KTtcbiAgICAgICAgICBuZXh0UnVuLnNldE1vbnRoKG5leHRSdW4uZ2V0TW9udGgoKSArIDEpOyAvLyArMSBtb250aFxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybjsgLy8gb25lLXRpbWUgam9icyBkb24ndCBnZXQgcmVzY2hlZHVsZWRcbiAgICAgIH1cblxuICAgICAgYXdhaXQgc3VwYWJhc2VBZG1pblxuICAgICAgICAuZnJvbSgnaW5kYl9pbmRleGluZ19qb2JzJylcbiAgICAgICAgLnVwZGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgICAgICAgbmV4dF9ydW5fYXQ6IG5leHRSdW4udG9JU09TdHJpbmcoKSxcbiAgICAgICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgfSlcbiAgICAgICAgLmVxKCdpZCcsIGpvYklkKTtcblxuICAgICAgY29uc29sZS5sb2coYPCfk4UgSm9iICR7am9iSWR9IHNjaGVkdWxlZCBmb3IgbmV4dCBydW4gYXQgJHtuZXh0UnVuLnRvSVNPU3RyaW5nKCl9YCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHNjaGVkdWxpbmcgbmV4dCBydW4gZm9yIGpvYiAke2pvYklkfTpgLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBtb25pdG9yIHN0YXR1c1xuICAgKi9cbiAgZ2V0U3RhdHVzKCk6IHsgaXNSdW5uaW5nOiBib29sZWFuOyBuZXh0Q2hlY2s/OiBzdHJpbmcgfSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzUnVubmluZzogdGhpcy5pc1J1bm5pbmcsXG4gICAgICBuZXh0Q2hlY2s6IHRoaXMuY3JvbkpvYiA/ICdFdmVyeSBtaW51dGUnIDogdW5kZWZpbmVkXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYW51YWxseSB0cmlnZ2VyIGpvYiBwcm9jZXNzaW5nIChmb3IgdGVzdGluZylcbiAgICovXG4gIGFzeW5jIHRyaWdnZXJOb3coKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc29sZS5sb2coJ01hbnVhbGx5IHRyaWdnZXJpbmcgam9iIHByb2Nlc3NpbmcuLi4nKTtcbiAgICBhd2FpdCB0aGlzLmNoZWNrQW5kUHJvY2Vzc0pvYnMoKTtcbiAgfVxufVxuXG4vLyBFeHBvcnQgc2luZ2xldG9uIGluc3RhbmNlXG5leHBvcnQgY29uc3Qgam9iTW9uaXRvciA9IEpvYk1vbml0b3IuZ2V0SW5zdGFuY2UoKTsiXSwibmFtZXMiOlsiY3JvbiIsInN1cGFiYXNlQWRtaW4iLCJHb29nbGVJbmRleGluZ1Byb2Nlc3NvciIsIkpvYk1vbml0b3IiLCJpc1J1bm5pbmciLCJjcm9uSm9iIiwicHJvY2Vzc29yIiwiZ2V0SW5zdGFuY2UiLCJpbnN0YW5jZSIsInN0YXJ0IiwiY29uc29sZSIsImxvZyIsInNjaGVkdWxlIiwiY2hlY2tBbmRQcm9jZXNzSm9icyIsInRpbWV6b25lIiwic3RvcCIsImRlc3Ryb3kiLCJkYXRhIiwicGVuZGluZ0pvYnMiLCJlcnJvciIsImZyb20iLCJzZWxlY3QiLCJlcSIsImlzIiwib3IiLCJEYXRlIiwidG9JU09TdHJpbmciLCJsaW1pdCIsImxlbmd0aCIsImpvYiIsImlkIiwibmFtZSIsInJlc3VsdCIsInByb2Nlc3NJbmRleGluZ0pvYiIsInN1Y2Nlc3MiLCJzY2hlZHVsZV90eXBlIiwic2NoZWR1bGVOZXh0UnVuIiwiam9iSWQiLCJzY2hlZHVsZVR5cGUiLCJub3ciLCJuZXh0UnVuIiwiZ2V0VGltZSIsInNldE1vbnRoIiwiZ2V0TW9udGgiLCJ1cGRhdGUiLCJzdGF0dXMiLCJuZXh0X3J1bl9hdCIsInVwZGF0ZWRfYXQiLCJnZXRTdGF0dXMiLCJuZXh0Q2hlY2siLCJ1bmRlZmluZWQiLCJ0cmlnZ2VyTm93Iiwiam9iTW9uaXRvciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/job-monitor.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   supabaseAdmin: () => (/* binding */ supabaseAdmin)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://base.indexnow.studio\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlIiwiaWF0IjoxNzUzMDMwODAwLCJleHAiOjE5MTA3OTcyMDB9.druA2hNMG5tlToENwA6diLetpMm9GdJgaSRwi75iTW0\";\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n    auth: {\n        autoRefreshToken: true,\n        persistSession: true,\n        detectSessionInUrl: true\n    }\n});\n// Server-side client with service role key (for admin operations)\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\nconst supabaseAdmin = supabaseServiceKey ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceKey, {\n    auth: {\n        autoRefreshToken: false,\n        persistSession: false\n    }\n}) : (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey) // Fallback to anon key\n;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (supabase);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc3VwYWJhc2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFvRDtBQUVwRCxNQUFNQyxjQUFjQyw4QkFBb0M7QUFDeEQsTUFBTUcsa0JBQWtCSCwyS0FBeUM7QUFFMUQsTUFBTUssV0FBV1AsbUVBQVlBLENBQUNDLGFBQWFJLGlCQUFpQjtJQUNqRUcsTUFBTTtRQUNKQyxrQkFBa0I7UUFDbEJDLGdCQUFnQjtRQUNoQkMsb0JBQW9CO0lBQ3RCO0FBQ0YsR0FBRTtBQUVGLGtFQUFrRTtBQUNsRSxNQUFNQyxxQkFBcUJWLFFBQVFDLEdBQUcsQ0FBQ1UseUJBQXlCO0FBQ3pELE1BQU1DLGdCQUFnQkYscUJBQ3pCWixtRUFBWUEsQ0FBQ0MsYUFBYVcsb0JBQW9CO0lBQzVDSixNQUFNO1FBQ0pDLGtCQUFrQjtRQUNsQkMsZ0JBQWdCO0lBQ2xCO0FBQ0YsS0FDQVYsbUVBQVlBLENBQUNDLGFBQWFJLGlCQUFpQix1QkFBdUI7Q0FBeEI7QUFFOUMsaUVBQWVFLFFBQVFBLEVBQUEiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvbGliL3N1cGFiYXNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcydcblxuY29uc3Qgc3VwYWJhc2VVcmwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwhXG5jb25zdCBzdXBhYmFzZUFub25LZXkgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSFcblxuZXhwb3J0IGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlQ2xpZW50KHN1cGFiYXNlVXJsLCBzdXBhYmFzZUFub25LZXksIHtcbiAgYXV0aDoge1xuICAgIGF1dG9SZWZyZXNoVG9rZW46IHRydWUsXG4gICAgcGVyc2lzdFNlc3Npb246IHRydWUsXG4gICAgZGV0ZWN0U2Vzc2lvbkluVXJsOiB0cnVlXG4gIH1cbn0pXG5cbi8vIFNlcnZlci1zaWRlIGNsaWVudCB3aXRoIHNlcnZpY2Ugcm9sZSBrZXkgKGZvciBhZG1pbiBvcGVyYXRpb25zKVxuY29uc3Qgc3VwYWJhc2VTZXJ2aWNlS2V5ID0gcHJvY2Vzcy5lbnYuU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWVxuZXhwb3J0IGNvbnN0IHN1cGFiYXNlQWRtaW4gPSBzdXBhYmFzZVNlcnZpY2VLZXlcbiAgPyBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlU2VydmljZUtleSwge1xuICAgICAgYXV0aDoge1xuICAgICAgICBhdXRvUmVmcmVzaFRva2VuOiBmYWxzZSxcbiAgICAgICAgcGVyc2lzdFNlc3Npb246IGZhbHNlXG4gICAgICB9XG4gICAgfSlcbiAgOiBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlQW5vbktleSkgLy8gRmFsbGJhY2sgdG8gYW5vbiBrZXlcblxuZXhwb3J0IGRlZmF1bHQgc3VwYWJhc2UiXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50Iiwic3VwYWJhc2VVcmwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwic3VwYWJhc2VBbm9uS2V5IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkiLCJzdXBhYmFzZSIsImF1dGgiLCJhdXRvUmVmcmVzaFRva2VuIiwicGVyc2lzdFNlc3Npb24iLCJkZXRlY3RTZXNzaW9uSW5VcmwiLCJzdXBhYmFzZVNlcnZpY2VLZXkiLCJTVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZIiwic3VwYWJhc2VBZG1pbiJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase.ts\n");

/***/ }),

/***/ "(rsc)/./lib/websocket-service.ts":
/*!**********************************!*\
  !*** ./lib/websocket-service.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocketService: () => (/* binding */ WebSocketService)\n/* harmony export */ });\n/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ws */ \"(rsc)/./node_modules/ws/wrapper.mjs\");\n\nclass WebSocketService {\n    static getInstance() {\n        if (!WebSocketService.instance) {\n            WebSocketService.instance = new WebSocketService();\n        }\n        return WebSocketService.instance;\n    }\n    initialize(server) {\n        this.wss = new ws__WEBPACK_IMPORTED_MODULE_0__.WebSocketServer({\n            server,\n            path: '/ws',\n            verifyClient: (info)=>{\n                // Basic verification - you might want to add JWT verification here\n                return true;\n            }\n        });\n        this.wss.on('connection', (ws, request)=>{\n            const url = new URL(request.url, 'http://localhost');\n            const userId = url.searchParams.get('userId');\n            const jobId = url.searchParams.get('jobId');\n            if (!userId) {\n                ws.close(1008, 'Missing userId');\n                return;\n            }\n            const clientId = this.generateClientId();\n            const client = {\n                ws,\n                userId,\n                jobId: jobId || undefined\n            };\n            this.clients.set(clientId, client);\n            console.log(`WebSocket client connected: ${clientId} (user: ${userId}, job: ${jobId})`);\n            // Send initial connection confirmation\n            this.sendToClient(clientId, {\n                type: 'connection',\n                message: 'Connected to IndexNow Pro WebSocket'\n            });\n            ws.on('message', (data)=>{\n                try {\n                    const message = JSON.parse(data.toString());\n                    this.handleClientMessage(clientId, message);\n                } catch (error) {\n                    console.error('Error parsing WebSocket message:', error);\n                }\n            });\n            ws.on('close', ()=>{\n                console.log(`WebSocket client disconnected: ${clientId}`);\n                this.clients.delete(clientId);\n            });\n            ws.on('error', (error)=>{\n                console.error('WebSocket error:', error);\n                this.clients.delete(clientId);\n            });\n        });\n        console.log('WebSocket server initialized on path /ws');\n    }\n    generateClientId() {\n        return `client-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    }\n    handleClientMessage(clientId, message) {\n        const client = this.clients.get(clientId);\n        if (!client) return;\n        switch(message.type){\n            case 'subscribe_job':\n                client.jobId = message.jobId;\n                this.sendToClient(clientId, {\n                    type: 'subscribed',\n                    jobId: message.jobId\n                });\n                break;\n            case 'unsubscribe_job':\n                client.jobId = undefined;\n                this.sendToClient(clientId, {\n                    type: 'unsubscribed'\n                });\n                break;\n            case 'ping':\n                this.sendToClient(clientId, {\n                    type: 'pong'\n                });\n                break;\n        }\n    }\n    broadcastJobUpdate(userId, jobId, update) {\n        const message = {\n            type: 'job_update',\n            jobId,\n            ...update\n        };\n        // Send to all clients of this user who are subscribed to this job\n        this.clients.forEach((client, clientId)=>{\n            if (client.userId === userId && (client.jobId === jobId || !client.jobId) && client.ws.readyState === ws__WEBPACK_IMPORTED_MODULE_0__.WebSocket.OPEN) {\n                this.sendToClient(clientId, message);\n            }\n        });\n    }\n    broadcastToUser(userId, message) {\n        this.clients.forEach((client, clientId)=>{\n            if (client.userId === userId && client.ws.readyState === ws__WEBPACK_IMPORTED_MODULE_0__.WebSocket.OPEN) {\n                this.sendToClient(clientId, message);\n            }\n        });\n    }\n    sendToClient(clientId, message) {\n        const client = this.clients.get(clientId);\n        if (client && client.ws.readyState === ws__WEBPACK_IMPORTED_MODULE_0__.WebSocket.OPEN) {\n            try {\n                client.ws.send(JSON.stringify(message));\n            } catch (error) {\n                console.error('Error sending WebSocket message:', error);\n                this.clients.delete(clientId);\n            }\n        }\n    }\n    getConnectedClients() {\n        return this.clients.size;\n    }\n    getClientsByUser(userId) {\n        return Array.from(this.clients.values()).filter((client)=>client.userId === userId).length;\n    }\n    constructor(){\n        this.wss = null;\n        this.clients = new Map();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/websocket-service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/worker-startup.ts":
/*!*******************************!*\
  !*** ./lib/worker-startup.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBackgroundServicesStatus: () => (/* binding */ getBackgroundServicesStatus),\n/* harmony export */   startBackgroundServices: () => (/* binding */ startBackgroundServices),\n/* harmony export */   stopBackgroundServices: () => (/* binding */ stopBackgroundServices)\n/* harmony export */ });\n/* harmony import */ var _background_worker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./background-worker */ \"(rsc)/./lib/background-worker.ts\");\n\n/**\n * Worker Startup Module\n * \n * Initializes background services when the application starts.\n * This should be imported and called once during app initialization.\n */ let isStarted = false;\nfunction startBackgroundServices() {\n    if (isStarted) {\n        console.log('Background services already started');\n        return;\n    }\n    console.log('🚀 Initializing IndexNow Pro background services...');\n    try {\n        // Start the background worker\n        _background_worker__WEBPACK_IMPORTED_MODULE_0__.backgroundWorker.start();\n        isStarted = true;\n        console.log('✅ Background services started successfully');\n    } catch (error) {\n        console.error('❌ Failed to start background services:', error);\n    }\n}\nfunction stopBackgroundServices() {\n    if (!isStarted) {\n        console.log('Background services are not running');\n        return;\n    }\n    console.log('🛑 Stopping IndexNow Pro background services...');\n    try {\n        _background_worker__WEBPACK_IMPORTED_MODULE_0__.backgroundWorker.stop();\n        isStarted = false;\n        console.log('✅ Background services stopped successfully');\n    } catch (error) {\n        console.error('❌ Failed to stop background services:', error);\n    }\n}\nfunction getBackgroundServicesStatus() {\n    return {\n        isStarted,\n        worker: _background_worker__WEBPACK_IMPORTED_MODULE_0__.backgroundWorker.getStatus()\n    };\n}\n// Auto-start in production or development\nif (true) {\n    // Use process.nextTick to ensure modules are loaded and avoid multiple instances\n    process.nextTick(()=>{\n        if (!global.backgroundServicesStarted) {\n            global.backgroundServicesStarted = true;\n            startBackgroundServices();\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvd29ya2VyLXN0YXJ0dXAudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1RDtBQUV2RDs7Ozs7Q0FLQyxHQUVELElBQUlDLFlBQVk7QUFFVCxTQUFTQztJQUNkLElBQUlELFdBQVc7UUFDYkUsUUFBUUMsR0FBRyxDQUFDO1FBQ1o7SUFDRjtJQUVBRCxRQUFRQyxHQUFHLENBQUM7SUFFWixJQUFJO1FBQ0YsOEJBQThCO1FBQzlCSixnRUFBZ0JBLENBQUNLLEtBQUs7UUFDdEJKLFlBQVk7UUFFWkUsUUFBUUMsR0FBRyxDQUFDO0lBQ2QsRUFBRSxPQUFPRSxPQUFPO1FBQ2RILFFBQVFHLEtBQUssQ0FBQywwQ0FBMENBO0lBQzFEO0FBQ0Y7QUFFTyxTQUFTQztJQUNkLElBQUksQ0FBQ04sV0FBVztRQUNkRSxRQUFRQyxHQUFHLENBQUM7UUFDWjtJQUNGO0lBRUFELFFBQVFDLEdBQUcsQ0FBQztJQUVaLElBQUk7UUFDRkosZ0VBQWdCQSxDQUFDUSxJQUFJO1FBQ3JCUCxZQUFZO1FBRVpFLFFBQVFDLEdBQUcsQ0FBQztJQUNkLEVBQUUsT0FBT0UsT0FBTztRQUNkSCxRQUFRRyxLQUFLLENBQUMseUNBQXlDQTtJQUN6RDtBQUNGO0FBRU8sU0FBU0c7SUFDZCxPQUFPO1FBQ0xSO1FBQ0FTLFFBQVFWLGdFQUFnQkEsQ0FBQ1csU0FBUztJQUNwQztBQUNGO0FBRUEsMENBQTBDO0FBQzFDLElBQUksSUFBNkIsRUFBRTtJQUNqQyxpRkFBaUY7SUFDakZDLFFBQVFDLFFBQVEsQ0FBQztRQUNmLElBQUksQ0FBQyxPQUFnQkUseUJBQXlCLEVBQUU7WUFDN0NELE9BQWVDLHlCQUF5QixHQUFHO1lBQzVDYjtRQUNGO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9saWIvd29ya2VyLXN0YXJ0dXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmFja2dyb3VuZFdvcmtlciB9IGZyb20gJy4vYmFja2dyb3VuZC13b3JrZXInO1xuXG4vKipcbiAqIFdvcmtlciBTdGFydHVwIE1vZHVsZVxuICogXG4gKiBJbml0aWFsaXplcyBiYWNrZ3JvdW5kIHNlcnZpY2VzIHdoZW4gdGhlIGFwcGxpY2F0aW9uIHN0YXJ0cy5cbiAqIFRoaXMgc2hvdWxkIGJlIGltcG9ydGVkIGFuZCBjYWxsZWQgb25jZSBkdXJpbmcgYXBwIGluaXRpYWxpemF0aW9uLlxuICovXG5cbmxldCBpc1N0YXJ0ZWQgPSBmYWxzZTtcblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0QmFja2dyb3VuZFNlcnZpY2VzKCk6IHZvaWQge1xuICBpZiAoaXNTdGFydGVkKSB7XG4gICAgY29uc29sZS5sb2coJ0JhY2tncm91bmQgc2VydmljZXMgYWxyZWFkeSBzdGFydGVkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc29sZS5sb2coJ/CfmoAgSW5pdGlhbGl6aW5nIEluZGV4Tm93IFBybyBiYWNrZ3JvdW5kIHNlcnZpY2VzLi4uJyk7XG4gIFxuICB0cnkge1xuICAgIC8vIFN0YXJ0IHRoZSBiYWNrZ3JvdW5kIHdvcmtlclxuICAgIGJhY2tncm91bmRXb3JrZXIuc3RhcnQoKTtcbiAgICBpc1N0YXJ0ZWQgPSB0cnVlO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCfinIUgQmFja2dyb3VuZCBzZXJ2aWNlcyBzdGFydGVkIHN1Y2Nlc3NmdWxseScpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBGYWlsZWQgdG8gc3RhcnQgYmFja2dyb3VuZCBzZXJ2aWNlczonLCBlcnJvcik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0b3BCYWNrZ3JvdW5kU2VydmljZXMoKTogdm9pZCB7XG4gIGlmICghaXNTdGFydGVkKSB7XG4gICAgY29uc29sZS5sb2coJ0JhY2tncm91bmQgc2VydmljZXMgYXJlIG5vdCBydW5uaW5nJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc29sZS5sb2coJ/Cfm5EgU3RvcHBpbmcgSW5kZXhOb3cgUHJvIGJhY2tncm91bmQgc2VydmljZXMuLi4nKTtcbiAgXG4gIHRyeSB7XG4gICAgYmFja2dyb3VuZFdvcmtlci5zdG9wKCk7XG4gICAgaXNTdGFydGVkID0gZmFsc2U7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ+KchSBCYWNrZ3JvdW5kIHNlcnZpY2VzIHN0b3BwZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byBzdG9wIGJhY2tncm91bmQgc2VydmljZXM6JywgZXJyb3IpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCYWNrZ3JvdW5kU2VydmljZXNTdGF0dXMoKTogYW55IHtcbiAgcmV0dXJuIHtcbiAgICBpc1N0YXJ0ZWQsXG4gICAgd29ya2VyOiBiYWNrZ3JvdW5kV29ya2VyLmdldFN0YXR1cygpXG4gIH07XG59XG5cbi8vIEF1dG8tc3RhcnQgaW4gcHJvZHVjdGlvbiBvciBkZXZlbG9wbWVudFxuaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7IC8vIFNlcnZlci1zaWRlIG9ubHlcbiAgLy8gVXNlIHByb2Nlc3MubmV4dFRpY2sgdG8gZW5zdXJlIG1vZHVsZXMgYXJlIGxvYWRlZCBhbmQgYXZvaWQgbXVsdGlwbGUgaW5zdGFuY2VzXG4gIHByb2Nlc3MubmV4dFRpY2soKCkgPT4ge1xuICAgIGlmICghKGdsb2JhbCBhcyBhbnkpLmJhY2tncm91bmRTZXJ2aWNlc1N0YXJ0ZWQpIHtcbiAgICAgIChnbG9iYWwgYXMgYW55KS5iYWNrZ3JvdW5kU2VydmljZXNTdGFydGVkID0gdHJ1ZTtcbiAgICAgIHN0YXJ0QmFja2dyb3VuZFNlcnZpY2VzKCk7XG4gICAgfVxuICB9KTtcbn0iXSwibmFtZXMiOlsiYmFja2dyb3VuZFdvcmtlciIsImlzU3RhcnRlZCIsInN0YXJ0QmFja2dyb3VuZFNlcnZpY2VzIiwiY29uc29sZSIsImxvZyIsInN0YXJ0IiwiZXJyb3IiLCJzdG9wQmFja2dyb3VuZFNlcnZpY2VzIiwic3RvcCIsImdldEJhY2tncm91bmRTZXJ2aWNlc1N0YXR1cyIsIndvcmtlciIsImdldFN0YXR1cyIsInByb2Nlc3MiLCJuZXh0VGljayIsImdsb2JhbCIsImJhY2tncm91bmRTZXJ2aWNlc1N0YXJ0ZWQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/worker-startup.ts\n");

/***/ })

};
;